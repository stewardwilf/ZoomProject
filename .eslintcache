[{"/Users/wst15/Documents/websdk-react-app/src/index.js":"1","/Users/wst15/Documents/websdk-react-app/src/App.js":"2","/Users/wst15/Documents/websdk-react-app/src/reportWebVitals.js":"3","/Users/wst15/Documents/websdk-react-app/src/components/index.tsx":"4","/Users/wst15/Documents/websdk-react-app/src/components/SearchBar.js":"5","/Users/wst15/Documents/websdk-react-app/src/components/Preview.js":"6","/Users/wst15/Documents/websdk-react-app/src/components/ParticipantList.js":"7","/Users/wst15/Documents/websdk-react-app/src/components/Zoom.js":"8","/Users/wst15/Documents/websdk-react-app/src/components/Header.js":"9","/Users/wst15/Documents/websdk-react-app/src/components/Footer.tsx":"10","/Users/wst15/Documents/websdk-react-app/src/data/liveParticipants.js":"11","/Users/wst15/Documents/websdk-react-app/src/data/displayedParticipants.tsx":"12","/Users/wst15/Documents/websdk-react-app/src/data/selected.tsx":"13"},{"size":614,"mtime":1611848756489,"results":"14","hashOfConfig":"15"},{"size":437,"mtime":1611852269475,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1611662346139,"results":"17","hashOfConfig":"15"},{"size":228,"mtime":1611847695058,"results":"18","hashOfConfig":"15"},{"size":948,"mtime":1611925363203,"results":"19","hashOfConfig":"15"},{"size":1549,"mtime":1611856479045,"results":"20","hashOfConfig":"15"},{"size":6225,"mtime":1611936154828,"results":"21","hashOfConfig":"15"},{"size":4326,"mtime":1611939225001,"results":"22","hashOfConfig":"15"},{"size":1227,"mtime":1611916479185,"results":"23","hashOfConfig":"15"},{"size":176,"mtime":1611591362474,"results":"24","hashOfConfig":"15"},{"size":118,"mtime":1611852621691,"results":"25","hashOfConfig":"15"},{"size":169,"mtime":1611862458181,"results":"26","hashOfConfig":"15"},{"size":102,"mtime":1611853742817,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"lx2nkp",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"/Users/wst15/Documents/websdk-react-app/src/index.js",[],["57","58"],"/Users/wst15/Documents/websdk-react-app/src/App.js",[],"/Users/wst15/Documents/websdk-react-app/src/reportWebVitals.js",[],"/Users/wst15/Documents/websdk-react-app/src/components/index.tsx",[],["59","60"],"/Users/wst15/Documents/websdk-react-app/src/components/SearchBar.js",[],"/Users/wst15/Documents/websdk-react-app/src/components/Preview.js",[],"/Users/wst15/Documents/websdk-react-app/src/components/ParticipantList.js",["61","62","63"],"import React, { useState, useEffect } from 'react'\nimport { Button, Icon, Input, Form, List } from 'semantic-ui-react'\nimport { useRecoilState } from 'recoil'\nimport { Container, Draggable } from 'react-smooth-dnd';\nimport { selected as selectedp } from '../data/selected'\nimport { muteIndiv, rename } from './Zoom'\nimport { displayed } from '../data/displayedParticipants'\n\nexport const ParticipantList = () => {\n    const [selected, setSelected] = useRecoilState(selectedp);\n    const [participantsData] = useRecoilState(displayed);\n    const [showSelected, setShowSelected] = useState(false);\n\n    const [editingId, setEditingId] = useState(0)\n    const [oldName, setOldName] = useState('')\n    const [newName, setNewName] = useState('')\n\n\n    useEffect(() => {\n        console.log('editingId Change', editingId, oldName, newName)\n    }, [editingId]\n    );\n\n    const select = (name) => { //select individuals from list\n        if ((selected.filter((item) => item.userId === name.userId)).length < 1) {\n            setSelected([...selected, name])\n        }\n        else {\n            setSelected(selected.filter((item) => item.userId !== name.userId))\n        }\n    }\n\n    const reorderSelection = (event) => { //reorder selection on drag\n        let copy = [...selected]\n        copy.splice(event.removedIndex, 1); //remove one item where we pick element from\n        copy.splice(event.addedIndex, 0, selected[event.removedIndex]); //add removed item to new position\n        setSelected(copy)\n    }\n\n    const Selected = () => {\n        return (\n            <Button.Group fluid basic vertical className='ParticipantButtons'>\n                <Container dragHandleSelector=\".column-drag-handle\" onDrop={e => reorderSelection(e)}>\n                    {selected.map((p) => {\n                        return (\n                            <Draggable key={p.userId}>\n                                <Button className=\"draggable-item\" active={true}>\n                                    <span className=\"column-drag-handle\">\n                                        <div className='left'>\n                                            <Icon name='edit' />\n                                            {p.userName}\n                                        </div>\n                                        <div className='right'>\n                                            <Icon name={p.muted ? 'mute' : 'unmute'} />\n                                        &#x2630;\n                                    </div>\n                                    </span>\n                                </Button>\n                            </Draggable>\n                        );\n                    })}\n                </Container>\n            </Button.Group>\n        )\n    }\n\n    const resetEditingFields = () => {\n        setEditingId(0);\n        setNewName('');\n        setOldName('');\n    }\n    const sendDataOffToZoom = () => {\n        rename(editingId, oldName, newName);\n        resetEditingFields();\n    }\n\n    const setData = (person) => {\n        resetEditingFields()\n        setEditingId(person.userId)\n        setOldName(person.userName)\n    }\n\n    const InputForm = (person) => {\n        return (\n            <Form onSubmit={() => sendDataOffToZoom()}>\n                <Form.Group>\n                    <Form.Input\n                        key={'key' + person.userId}\n                        onChange={(e) => setNewName(e.target.value)}\n                        value={newName}\n                    />\n                    <Form.Button content='Submit' />\n                </Form.Group>\n            </Form>)\n    }\n    const Selector = () => {\n        return (\n            <List divided>\n                {participantsData.map((person) =>\n\n                    <List.Item key={person.userId}>\n                        <div className='left'>\n\n                            <Button icon='edit' onClick={() => setData(person)}></Button>\n                            {parseInt(editingId) === parseInt(person.userId) ?\n                                <InputForm person={person}></InputForm>\n                                : ''\n                            }\n                            {person.userName}\n                        </div>\n                        <div className='right'>\n                            <Button.Group>\n                                <Button\n                                    icon\n                                    onClick={() => { select(person) }}\n                                //active={selected.filter((item) => item.userId === person.userId).length != 0 ? true : false}\n                                >\n                                    <Icon\n                                        name={selected?.filter((sel) => sel.userId === person.userId).length > 0 ? 'remove circle' : 'add circle'} //set to change dynamically\n                                        color={selected?.filter((sel) => sel.userId === person.userId).length > 0 ? 'red' : 'green'}>\n                                    </Icon>\n                                </Button>\n                                <Button icon>\n                                    <Icon\n                                        name={person.muted ? 'mute' : 'unmute'} onClick={() => muteIndiv(person.userId, person.muted ? false : true)}\n                                        color={person.muted ? 'red' : 'green'} onClick={() => muteIndiv(person.userId, person.muted ? false : true)}\n                                    ></Icon>\n                                </Button>\n                            </Button.Group>\n                        </div>\n                    </List.Item>\n\n\n                )}\n            </List>\n        )\n    }\n    const show = () => {\n        if (showSelected) {\n            setShowSelected(false)\n        }\n        else {\n            setShowSelected(true)\n        }\n    }\n    const clearSelected = () => {\n        setSelected([])\n    }\n\n    return (\n        <>\n            <Button onClick={() => show()}>{showSelected ? 'Show All' : 'Show Selected'}</Button>\n            {selected.length > 0 ? <Button color='red' onClick={() => clearSelected()}>Clear Selection</Button> : <></>}\n            { showSelected ? <Selected /> : <Selector />}\n        </>)\n}\n","/Users/wst15/Documents/websdk-react-app/src/components/Zoom.js",["64","65"],"/Users/wst15/Documents/websdk-react-app/src/components/Header.js",[],"/Users/wst15/Documents/websdk-react-app/src/components/Footer.tsx",[],"/Users/wst15/Documents/websdk-react-app/src/data/liveParticipants.js",[],"/Users/wst15/Documents/websdk-react-app/src/data/displayedParticipants.tsx",[],"/Users/wst15/Documents/websdk-react-app/src/data/selected.tsx",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":2,"column":24,"nodeType":"72","messageId":"73","endLine":2,"endColumn":29},{"ruleId":"74","severity":1,"message":"75","line":21,"column":8,"nodeType":"76","endLine":21,"endColumn":19,"suggestions":"77"},{"ruleId":"78","severity":1,"message":"79","line":126,"column":80,"nodeType":"80","endLine":126,"endColumn":149},{"ruleId":"70","severity":1,"message":"81","line":6,"column":10,"nodeType":"72","messageId":"73","endLine":6,"endColumn":16},{"ruleId":"70","severity":1,"message":"82","line":114,"column":11,"nodeType":"72","messageId":"73","endLine":114,"endColumn":18},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'Input' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'newName' and 'oldName'. Either include them or remove the dependency array.","ArrayExpression",["85"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Button' is defined but never used.","'muteAll' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},"Update the dependencies array to be: [editingId, newName, oldName]",{"range":"88","text":"89"},[841,852],"[editingId, newName, oldName]"]