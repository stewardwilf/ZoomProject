{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/wst15/Documents/websdk-react-app/src/components/ParticipantList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { displayed } from '../data/displayedParticipants';\nimport { Participant } from './Participant';\nimport './participant.css';\nexport const ParticipantList = () => {\n  _s();\n\n  const [editingId, setEditingId] = useState(-1);\n  const [participantsData] = useRecoilState(displayed);\n  const [newName, setNewName] = useState('');\n\n  const renamePerson = () => {\n    //Goes off the assumption editingId is selected at the point of running. You could pass in ID as param.\n    var userObj = participantsData.find(x => x.userId === editingId);\n    userObj ? console.log('Do what you would do here where newName: ' + newName + ' originalName: ' + userObj.userName) : console.log(\"User not found. Handle error. Maybe they're clicking save when somehow when editingId is -1 or something or maybe even the person has left the call and is no longer in participantsData\");\n    setEditingId(-1);\n    setNewName('');\n  };\n\n  const handleSetEditId = newId => {\n    editingId !== newId ? setEditingId(newId) : setEditingId(-1); //So it doesnt carry over from previous incomplete edit\n\n    setNewName('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: participantsData.map(person => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"participant-container\",\n      children: [/*#__PURE__*/_jsxDEV(Participant, {\n        id: person.userId,\n        originalName: person.userName,\n        muted: person.muted,\n        isHost: person.isHost,\n        editMode: editingId === person.userId,\n        newName: newName,\n        setNewName: setNewName,\n        saveNewName: renamePerson\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleSetEditId(person.userId),\n        children: \"rename\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this)]\n    }, person.userId, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ParticipantList, \"/GxU8GBrgoEDXrI93OmZN8Rx8V4=\", false, function () {\n  return [useRecoilState];\n});\n\n_c = ParticipantList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ParticipantList\");","map":{"version":3,"sources":["/Users/wst15/Documents/websdk-react-app/src/components/ParticipantList.js"],"names":["React","useState","useRecoilState","displayed","Participant","ParticipantList","editingId","setEditingId","participantsData","newName","setNewName","renamePerson","userObj","find","x","userId","console","log","userName","handleSetEditId","newId","map","person","muted","isHost"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,cAAT,QAA+B,QAA/B;AACA,SAASC,SAAT,QAA0B,+BAA1B;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAO,mBAAP;AAGA,OAAO,MAAMC,eAAe,GAAG,MAAM;AAAA;;AACjC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,CAAC,CAAF,CAA1C;AACA,QAAM,CAACO,gBAAD,IAAqBN,cAAc,CAACC,SAAD,CAAzC;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,EAAD,CAAtC;;AAEA,QAAMU,YAAY,GAAG,MAAM;AACvB;AACA,QAAIC,OAAO,GAAGJ,gBAAgB,CAACK,IAAjB,CAAsBC,CAAC,IAAIA,CAAC,CAACC,MAAF,KAAaT,SAAxC,CAAd;AACCM,IAAAA,OAAD,GAEII,OAAO,CAACC,GAAR,CAAY,8CAA8CR,OAA9C,GAAwD,iBAAxD,GAA4EG,OAAO,CAACM,QAAhG,CAFJ,GAKIF,OAAO,CAACC,GAAR,CAAY,0LAAZ,CALJ;AAOAV,IAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAG,IAAAA,UAAU,CAAC,EAAD,CAAV;AACH,GAZD;;AAcA,QAAMS,eAAe,GAAIC,KAAD,IAAW;AAC9Bd,IAAAA,SAAS,KAAKc,KAAf,GAAwBb,YAAY,CAACa,KAAD,CAApC,GAA8Cb,YAAY,CAAC,CAAC,CAAF,CAA1D,CAD+B,CAE/B;;AACAG,IAAAA,UAAU,CAAC,EAAD,CAAV;AACH,GAJD;;AAMA,sBACI;AAAA,cAEIF,gBAAgB,CAACa,GAAjB,CAAsBC,MAAD,iBACjB;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA,8BACI,QAAC,WAAD;AACI,QAAA,EAAE,EAAEA,MAAM,CAACP,MADf;AAEI,QAAA,YAAY,EAAEO,MAAM,CAACJ,QAFzB;AAGI,QAAA,KAAK,EAAEI,MAAM,CAACC,KAHlB;AAII,QAAA,MAAM,EAAED,MAAM,CAACE,MAJnB;AAKI,QAAA,QAAQ,EAAGlB,SAAS,KAAKgB,MAAM,CAACP,MALpC;AAMI,QAAA,OAAO,EAAEN,OANb;AAOI,QAAA,UAAU,EAAEC,UAPhB;AAQI,QAAA,WAAW,EAAEC;AARjB;AAAA;AAAA;AAAA;AAAA,cADJ,eAWI;AAAQ,QAAA,OAAO,EAAE,MAAMQ,eAAe,CAACG,MAAM,CAACP,MAAR,CAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAXJ;AAAA,OAA4CO,MAAM,CAACP,MAAnD;AAAA;AAAA;AAAA;AAAA,YADJ;AAFJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH,CA7CM;;GAAMV,e;UAEkBH,c;;;KAFlBG,e","sourcesContent":["import React, { useState } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { displayed } from '../data/displayedParticipants';\nimport { Participant } from './Participant';\nimport './participant.css';\n\n\nexport const ParticipantList = () => {\n    const [editingId, setEditingId] = useState(-1);\n    const [participantsData] = useRecoilState(displayed);\n    const [newName, setNewName] = useState('');\n\n    const renamePerson = () => {\n        //Goes off the assumption editingId is selected at the point of running. You could pass in ID as param.\n        var userObj = participantsData.find(x => x.userId === editingId);\n        (userObj)\n        ?\n            console.log('Do what you would do here where newName: ' + newName + ' originalName: ' + userObj.userName)\n            \n        :\n            console.log(\"User not found. Handle error. Maybe they're clicking save when somehow when editingId is -1 or something or maybe even the person has left the call and is no longer in participantsData\")\n    \n        setEditingId(-1);\n        setNewName('');\n    }\n\n    const handleSetEditId = (newId) => {\n        (editingId !== newId) ? setEditingId(newId) : setEditingId(-1);\n        //So it doesnt carry over from previous incomplete edit\n        setNewName('');\n    }\n\n    return(\n        <div>\n            {\n            participantsData.map((person) =>\n                <div className='participant-container' key={person.userId} >\n                    <Participant \n                        id={person.userId} \n                        originalName={person.userName} \n                        muted={person.muted} \n                        isHost={person.isHost} \n                        editMode={(editingId === person.userId)}\n                        newName={newName}\n                        setNewName={setNewName}\n                        saveNewName={renamePerson}\n                    />\n                    <button onClick={() => handleSetEditId(person.userId)}>rename</button>\n                </div> \n            )}\n        </div>\n    )\n}\n\n\n"]},"metadata":{},"sourceType":"module"}