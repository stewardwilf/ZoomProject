{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/wst15/Documents/websdk-react-app/src/components/Preview.js\",\n    _s = $RefreshSig$();\n\nimport { Grid, Icon, Button } from 'semantic-ui-react';\nimport { useRecoilState } from 'recoil';\nimport React, { useEffect, useState } from 'react';\nimport { selected } from '../data/selected';\nimport { config } from '../data/config';\nimport { muteIndiv } from './Zoom';\nimport { liveParticipants } from '../data/liveParticipants';\nexport const Preview = () => {\n  _s();\n\n  const [selectedState, setSelected] = useRecoilState(selected);\n  const [wh, setwh] = useState(0);\n  const [cf] = useRecoilState(config);\n  const [participantsData] = useRecoilState(liveParticipants);\n  let fullSelectedArray = [];\n  useEffect(() => {\n    // recalculate number of rows/ columns when selections change\n    if (cf) {\n      setwh(Math.ceil(Math.sqrt(selectedState === null || selectedState === void 0 ? void 0 : selectedState.length)) ? Math.ceil(Math.sqrt(selectedState === null || selectedState === void 0 ? void 0 : selectedState.length)) : 1);\n      fullSelectedArray = selectedState.map(sel => participantsData === null || participantsData === void 0 ? void 0 : participantsData.filter(x => x.userId === sel)[0]);\n      console.log('fsa', fullSelectedArray);\n    } //let h:number = (Math.ceil(selectedState.length / w) ? Math.ceil(selectedState.length / w) : 1)\n\n  }, [selectedState]);\n  useEffect(() => {\n    // recalculate number of rows/ columns when selections change\n    if (!cf) {\n      setwh(Math.ceil(Math.sqrt(participantsData === null || participantsData === void 0 ? void 0 : participantsData.length)) ? Math.ceil(Math.sqrt(participantsData === null || participantsData === void 0 ? void 0 : participantsData.length)) : 1);\n    } //let h:number = (Math.ceil(selectedState.length / w) ? Math.ceil(selectedState.length / w) : 1)\n\n  }, [participantsData]);\n\n  const removeFromState = obj => {\n    //filter out removed item\n    setSelected(selectedState.filter(item => item.userId !== obj.userId));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        columns: wh,\n        children: cf ? fullSelectedArray.map(sel => {\n          console.log(sel);\n          /*              \n          <>\n            <Grid.Column padded=\"false\" >\n              <div className='PreviewFooter' key={sel.userId}>     \n              \n                <Button icon className='right' onClick={() => removeFromState(sel)}>\n                  <Icon name='close' />\n                </Button>\n                <div className='VideoStream'></div>\n                <div className='PreviewFooter'>\n                  <h5 className='left'>{sel.userName} </h5>\n                  <Icon className='right' name={sel.muted ? 'mute' : 'unmute'} />\n                </div>\n              </div>\n             </Grid.Column>\n          </> */\n        }) : participantsData === null || participantsData === void 0 ? void 0 : participantsData.map(sel => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Grid.Column, {\n            padded: \"false\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"PreviewFooter\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"PreviewFooterContents\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"left\",\n                  children: [sel.userName, \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 70,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Icon, {\n                  className: \"right\",\n                  name: sel.muted ? 'mute' : 'unmute',\n                  color: sel.muted ? 'red' : 'green',\n                  onClick: () => muteIndiv(sel.userId, sel.muted ? false : true),\n                  size: \"large\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 71,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 21\n              }, this)\n            }, 'a' + sel.userId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 17\n          }, this)\n        }, void 0, false))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Preview, \"E5YWnF+oPNnwyq8Nn3YYlhzKGGg=\", false, function () {\n  return [useRecoilState, useRecoilState, useRecoilState];\n});\n\n_c = Preview;\n\nvar _c;\n\n$RefreshReg$(_c, \"Preview\");","map":{"version":3,"sources":["/Users/wst15/Documents/websdk-react-app/src/components/Preview.js"],"names":["Grid","Icon","Button","useRecoilState","React","useEffect","useState","selected","config","muteIndiv","liveParticipants","Preview","selectedState","setSelected","wh","setwh","cf","participantsData","fullSelectedArray","Math","ceil","sqrt","length","map","sel","filter","x","userId","console","log","removeFromState","obj","item","userName","muted"],"mappings":"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","sourcesContent":["import { Grid, Icon, Button } from 'semantic-ui-react'\nimport { useRecoilState } from 'recoil'\nimport React, { useEffect, useState } from 'react'\nimport { selected } from '../data/selected'\nimport { config } from '../data/config'\nimport { muteIndiv } from './Zoom'\nimport { liveParticipants } from '../data/liveParticipants'\n\n\nexport const Preview = () => {\n  const [selectedState, setSelected] = useRecoilState(selected);\n  const [wh, setwh] = useState(0);\n  const [cf,] = useRecoilState(config);\n  const [participantsData,] = useRecoilState(liveParticipants);\n  let fullSelectedArray = []\n  useEffect(() => { // recalculate number of rows/ columns when selections change\n    if (cf) {\n      setwh((Math.ceil(Math.sqrt(selectedState?.length)) ? Math.ceil(Math.sqrt(selectedState?.length)) : 1))\n      fullSelectedArray = selectedState.map(sel => participantsData?.filter(x => x.userId === sel)[0])\n      console.log('fsa', fullSelectedArray)\n    }\n    //let h:number = (Math.ceil(selectedState.length / w) ? Math.ceil(selectedState.length / w) : 1)\n  }, [selectedState])\n\n  useEffect(() => { // recalculate number of rows/ columns when selections change\n    if (!cf) {\n      setwh((Math.ceil(Math.sqrt(participantsData?.length)) ? Math.ceil(Math.sqrt(participantsData?.length)) : 1))\n    }\n    //let h:number = (Math.ceil(selectedState.length / w) ? Math.ceil(selectedState.length / w) : 1)\n  }, [participantsData])\n\n\n  const removeFromState = (obj) => { //filter out removed item\n    setSelected(selectedState.filter((item) => item.userId !== obj.userId))\n  }\n\n  return (\n    <>\n      <div className='left'>\n        <Grid columns={wh}>\n\n          {cf ?\n\n            fullSelectedArray.map((sel) => {console.log(sel)\n              /*              \n              <>\n                <Grid.Column padded=\"false\" >\n                  <div className='PreviewFooter' key={sel.userId}>     \n                  \n                    <Button icon className='right' onClick={() => removeFromState(sel)}>\n                      <Icon name='close' />\n                    </Button>\n                    <div className='VideoStream'></div>\n                    <div className='PreviewFooter'>\n                      <h5 className='left'>{sel.userName} </h5>\n                      <Icon className='right' name={sel.muted ? 'mute' : 'unmute'} />\n                    </div>\n                  </div>\n\n                </Grid.Column>\n              </> */}\n            )\n            :\n            participantsData?.map((sel) =>\n              <>\n\n                <Grid.Column padded=\"false\" >\n                  <div className='PreviewFooter' key={'a' + sel.userId}>\n                    <div className='PreviewFooterContents'>\n                      <p className='left'>{sel.userName} </p>\n                      <Icon\n                        className='right'\n                        name={sel.muted ? 'mute' : 'unmute'}\n                        color={sel.muted ? 'red' : 'green'}\n                        onClick={() => muteIndiv(sel.userId, sel.muted ? false : true)}\n                        size='large'\n                      ></Icon>\n                    </div>\n                  </div>\n                </Grid.Column>\n              </>\n            )}\n        </Grid>\n      </div>\n    </>\n  )\n}"]},"metadata":{},"sourceType":"module"}