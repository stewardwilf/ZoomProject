{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/wst15/Documents/websdk-react-app/src/components/Preview.js\",\n    _s = $RefreshSig$();\n\nimport { Grid, Icon } from 'semantic-ui-react';\nimport { useRecoilState } from 'recoil';\nimport React, { useEffect, useState } from 'react';\nimport { selected } from '../data/selected';\nimport { config } from '../data/config';\nimport { muteIndiv } from './Zoom';\nimport { liveParticipants } from '../data/liveParticipants';\nimport { selectedAll } from '../data/selectedAll';\nexport const Preview = () => {\n  _s();\n\n  const [selectedState, setSelected] = useRecoilState(selected);\n  const [wh, setwh] = useState(\"0\");\n  const [cf] = useRecoilState(config);\n  const [participantsData] = useRecoilState(liveParticipants);\n  const [selectedAllState, setSelectedAllState] = useRecoilState(selectedAll);\n  let fullSelectedArray;\n  useEffect(() => {\n    // recalculate number of rows/ columns when selections change\n    if (cf) {\n      setwh(Math.ceil(Math.sqrt(selectedState === null || selectedState === void 0 ? void 0 : selectedState.length)) ? Math.ceil(Math.sqrt(selectedState === null || selectedState === void 0 ? void 0 : selectedState.length)) + \"\" : \"1\");\n      fullSelectedArray = selectedState.map(sel => participantsData === null || participantsData === void 0 ? void 0 : participantsData.filter(x => x.userId === sel)[0]);\n      setSelectedAllState(fullSelectedArray); //console.log('selected', fullSelectedArray)\n\n      console.log(selectedState);\n    }\n\n    console.log(wh + \"\"); //let h:number = (Math.ceil(selectedState.length / w) ? Math.ceil(selectedState.length / w) : 1)\n  }, [selectedState]);\n  useEffect(() => {\n    // recalculate number of rows/ columns when selections change\n    if (!cf) {\n      setwh(Math.ceil(Math.sqrt(participantsData === null || participantsData === void 0 ? void 0 : participantsData.length)) ? Math.ceil(Math.sqrt(participantsData === null || participantsData === void 0 ? void 0 : participantsData.length)) + \"\" : \"1\");\n    }\n\n    console.log(wh); //let h:number = (Math.ceil(selectedState.length / w) ? Math.ceil(selectedState.length / w) : 1)\n  }, [participantsData]); // const removeFromState = (obj) => { //filter out removed item\n  //   setSelected(selectedState.filter((item) => item.userId !== obj.userId))\n  // }\n\n  const pin = id => {\n    setSelected([...selectedState, id]); // const ap = accessParticipants()\n    // //console.log('aplen',ap.length,'index',index, 'selectedlen',selected.length)\n    // const num = ap.length - index \n    // simulateMouseover(num)\n    // let pinButton = document.querySelector(\"#wc-container-left > div:nth-child(3) > div > div.speaker-bar-container__horizontal-view-wrap > div:nth-child(\"+num+\") > div > div:nth-child(3) > div > div > ul > li:nth-child(5) > a\")\n    // pinButton.click()        \n  };\n\n  const unpin = id => {\n    setSelected([...selectedState.filter(item => item !== id)]); // const ap = accessParticipants()\n    // const num = ap?.length - index\n    // simulateMouseover(num)\n    // let pinButton = document.querySelector(\"#wc-container-left > div:nth-child(3) > div > div.speaker-bar-container__horizontal-view-wrap > div:nth-child(\"+num+\") > div > div:nth-child(3) > div > div > ul > li:nth-child(5) > a\")\n    // pinButton.click()\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        columns: wh,\n        children: cf ? selectedAllState === null || selectedAllState === void 0 ? void 0 : selectedAllState.map((sel, idx) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Grid.Column, {\n            padded: \"false\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"PreviewFooter\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"PreviewFooterContents\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"left\",\n                  children: [sel.userName, \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 79,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Icon, {\n                  className: \"right\",\n                  name: 'map pin',\n                  onClick: selectedState.find(x => x === sel.userId) ? () => unpin(sel.userId) : () => pin(sel.userId),\n                  size: \"large\",\n                  color: selectedState.find(x => x === sel.userId) ? 'red' : 'green'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 80,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Icon, {\n                  className: \"right\",\n                  name: sel.muted ? 'mute' : 'unmute',\n                  color: sel.muted ? 'red' : 'green',\n                  onClick: () => muteIndiv(sel.userId, sel.muted ? false : true),\n                  size: \"large\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 87,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 21\n              }, this)\n            }, sel.userId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 17\n          }, this)\n        }, void 0, false)) : participantsData === null || participantsData === void 0 ? void 0 : participantsData.map(sel => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Grid.Column, {\n            padded: \"false\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"PreviewFooter\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"PreviewFooterContents\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"left\",\n                  children: [sel.userName, \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 107,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Icon, {\n                  className: \"right\",\n                  name: sel.muted ? 'mute' : 'unmute',\n                  color: sel.muted ? 'red' : 'green',\n                  onClick: () => muteIndiv(sel.userId, sel.muted ? false : true),\n                  size: \"large\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 108,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 21\n              }, this)\n            }, sel.userId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 17\n          }, this)\n        }, void 0, false))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Preview, \"8j1MZ3awhCYcTR5DlCcpHMs2YZM=\", false, function () {\n  return [useRecoilState, useRecoilState, useRecoilState, useRecoilState];\n});\n\n_c = Preview;\n\nvar _c;\n\n$RefreshReg$(_c, \"Preview\");","map":{"version":3,"sources":["/Users/wst15/Documents/websdk-react-app/src/components/Preview.js"],"names":["Grid","Icon","useRecoilState","React","useEffect","useState","selected","config","muteIndiv","liveParticipants","selectedAll","Preview","selectedState","setSelected","wh","setwh","cf","participantsData","selectedAllState","setSelectedAllState","fullSelectedArray","Math","ceil","sqrt","length","map","sel","filter","x","userId","console","log","pin","id","unpin","item","idx","userName","find","muted"],"mappings":"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","sourcesContent":["import { Grid, Icon } from 'semantic-ui-react'\nimport { useRecoilState } from 'recoil'\nimport React, { useEffect, useState } from 'react'\nimport { selected } from '../data/selected'\nimport { config } from '../data/config'\nimport { muteIndiv } from './Zoom'\nimport { liveParticipants } from '../data/liveParticipants'\nimport { selectedAll } from '../data/selectedAll'\n\n\nexport const Preview = () => {\n  const [selectedState, setSelected] = useRecoilState(selected);\n  const [wh, setwh] = useState(\"0\");\n  const [cf,] = useRecoilState(config);\n  const [participantsData,] = useRecoilState(liveParticipants);\n  const [selectedAllState, setSelectedAllState] = useRecoilState(selectedAll);\n\n\n  let fullSelectedArray\n\n  useEffect(() => { // recalculate number of rows/ columns when selections change\n    if (cf) {\n      setwh((Math.ceil(Math.sqrt(selectedState?.length)) ? Math.ceil(Math.sqrt(selectedState?.length))+\"\" : \"1\"))\n\n      fullSelectedArray = selectedState.map(sel => participantsData?.filter(x => x.userId === sel)[0])\n      setSelectedAllState(fullSelectedArray)\n      //console.log('selected', fullSelectedArray)\n      console.log(selectedState)\n    }\n    console.log(wh+\"\")\n    //let h:number = (Math.ceil(selectedState.length / w) ? Math.ceil(selectedState.length / w) : 1)\n  }, [selectedState])\n\n  useEffect(() => { // recalculate number of rows/ columns when selections change\n    if (!cf) {\n      setwh((Math.ceil(Math.sqrt(participantsData?.length)) ? Math.ceil(Math.sqrt(participantsData?.length))+\"\" : \"1\"))\n    }\n    console.log(wh)\n\n    //let h:number = (Math.ceil(selectedState.length / w) ? Math.ceil(selectedState.length / w) : 1)\n  }, [participantsData])\n\n\n  // const removeFromState = (obj) => { //filter out removed item\n  //   setSelected(selectedState.filter((item) => item.userId !== obj.userId))\n  // }\n\n  const pin = (id) => {\n    setSelected([...selectedState, id])\n    // const ap = accessParticipants()\n    // //console.log('aplen',ap.length,'index',index, 'selectedlen',selected.length)\n\n    // const num = ap.length - index \n    // simulateMouseover(num)\n    // let pinButton = document.querySelector(\"#wc-container-left > div:nth-child(3) > div > div.speaker-bar-container__horizontal-view-wrap > div:nth-child(\"+num+\") > div > div:nth-child(3) > div > div > ul > li:nth-child(5) > a\")\n    // pinButton.click()        \n}\n\nconst unpin = (id) => {\n    setSelected([...selectedState.filter(item => item !== id)])\n    // const ap = accessParticipants()\n    // const num = ap?.length - index\n    // simulateMouseover(num)\n    // let pinButton = document.querySelector(\"#wc-container-left > div:nth-child(3) > div > div.speaker-bar-container__horizontal-view-wrap > div:nth-child(\"+num+\") > div > div:nth-child(3) > div > div > ul > li:nth-child(5) > a\")\n    // pinButton.click()\n}\n\n  return (\n    <>\n      <div className='left'>\n        <Grid columns={wh}>\n\n          {cf ?\n            selectedAllState?.map((sel,idx) =>\n              <>\n                <Grid.Column padded=\"false\" >\n                  <div className='PreviewFooter' key={sel.userId}>\n                    <div className='PreviewFooterContents'>\n                      <p className='left'>{sel.userName} </p>\n                      <Icon\n                        className='right'\n                        name={'map pin'}\n                        onClick={selectedState.find(x => x === sel.userId) ? () => unpin(sel.userId) : () => pin(sel.userId)}\n                        size='large'\n                        color={selectedState.find(x => x === sel.userId) ? 'red' : 'green'}\n                      ></Icon>\n                      <Icon\n                        className='right'\n                        name={sel.muted ? 'mute' : 'unmute'}\n                        color={sel.muted ? 'red' : 'green'}\n                        onClick={() => muteIndiv(sel.userId, sel.muted ? false : true)}\n                        size='large'\n                      ></Icon>\n                    </div>\n                  </div>\n\n                </Grid.Column>\n              </>\n            )\n            :\n            participantsData?.map((sel) =>\n              <>\n\n                <Grid.Column padded=\"false\" >\n                  <div className='PreviewFooter' key={sel.userId}>\n                    <div className='PreviewFooterContents'>\n                      <p className='left'>{sel.userName} </p>\n                      <Icon\n                        className='right'\n                        name={sel.muted ? 'mute' : 'unmute'}\n                        color={sel.muted ? 'red' : 'green'}\n                        onClick={() => muteIndiv(sel.userId, sel.muted ? false : true)}\n                        size='large'\n                      ></Icon>\n                    </div>\n                  </div>\n                </Grid.Column>\n              </>\n            )}\n        </Grid>\n      </div>\n    </>\n  )\n}"]},"metadata":{},"sourceType":"module"}