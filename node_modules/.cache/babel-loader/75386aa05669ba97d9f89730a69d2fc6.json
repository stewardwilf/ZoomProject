{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/wst15/Documents/websdk-sample-react/src/components/ParticipantList.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Button, Icon } from 'semantic-ui-react';\nimport { useRecoilState } from 'recoil';\nimport { Container, Draggable } from 'react-smooth-dnd';\nimport { selected as selectedp } from '../data/selected';\nimport { liveParticipants } from '../data/liveParticipants';\nexport const ParticipantList = () => {\n  _s();\n\n  const [selected, setSelected] = useRecoilState(selectedp);\n  const [participantsData] = useRecoilState(liveParticipants);\n  const [showSelected, setShowSelected] = useState(false);\n  useEffect(() => {\n    //Remove default recoil value - do this in a cleaner way\n    setSelected([]);\n  }, []);\n\n  const select = name => {\n    //select individuals from list\n    if (selected.filter(item => item.id === name.id).length < 1) {\n      setSelected([...selected, name]);\n    } else {\n      setSelected(selected.filter(item => item.id !== name.id));\n    }\n  };\n\n  const reorderSelection = event => {\n    //reorder selection on drag\n    let copy = [...selected];\n    copy.splice(event.removedIndex, 1); //remove one item where we pick element from\n\n    copy.splice(event.addedIndex, 0, selected[event.removedIndex]); //add removed item to new position\n\n    setSelected(copy);\n  };\n\n  const Selected = () => {\n    return /*#__PURE__*/_jsxDEV(Button.Group, {\n      fluid: true,\n      basic: true,\n      vertical: true,\n      className: \"ParticipantButtons\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        dragHandleSelector: \".column-drag-handle\",\n        onDrop: e => reorderSelection(e),\n        children: selected.map(p => {\n          return /*#__PURE__*/_jsxDEV(Draggable, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              className: \"draggable-item\",\n              active: true,\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"column-drag-handle\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"left\",\n                  children: [/*#__PURE__*/_jsxDEV(Icon, {\n                    name: \"edit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 45,\n                    columnNumber: 45\n                  }, this), p.title]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 44,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"right\",\n                  children: [/*#__PURE__*/_jsxDEV(Icon, {\n                    color: p.icon,\n                    name: \"wifi\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 49,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Icon, {\n                    name: \"mute\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 50,\n                    columnNumber: 45\n                  }, this), \"\\u2630\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 48,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 33\n            }, this)\n          }, p.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this);\n  };\n\n  const Selector = () => {\n    return /*#__PURE__*/_jsxDEV(Button.Group, {\n      fluid: true,\n      basic: true,\n      vertical: true,\n      className: \"ParticipantButtons\",\n      children: participantsData.map(person => /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => {\n          select(person);\n        },\n        active: selected.filter(item => item.userId === person.userId).length != 0 ? true : false,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"left\",\n            children: [/*#__PURE__*/_jsxDEV(Icon, {\n              name: \"edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 29\n            }, this), person.userName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"right\",\n            children: [/*#__PURE__*/_jsxDEV(Icon, {\n              color: \"green\",\n              name: \"wifi\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Icon, {\n              name: person.muted ? 'mute' : 'unmute'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this)\n      }, person.userId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }, this);\n  };\n\n  const show = () => {\n    if (showSelected) {\n      setShowSelected(false);\n    } else {\n      setShowSelected(true);\n    }\n  };\n\n  const clearSelected = () => {\n    setSelected([]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => show(),\n      children: showSelected ? 'Show All' : 'Show Selected'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), selected.length > 0 ? /*#__PURE__*/_jsxDEV(Button, {\n      color: \"red\",\n      onClick: () => clearSelected(),\n      children: \"Clear Selection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 34\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), showSelected ? /*#__PURE__*/_jsxDEV(Selected, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 30\n    }, this) : /*#__PURE__*/_jsxDEV(Selector, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 45\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ParticipantList, \"A1g4/8lunvmNsC/PdvEZAQzC7+8=\", false, function () {\n  return [useRecoilState, useRecoilState];\n});\n\n_c = ParticipantList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ParticipantList\");","map":{"version":3,"sources":["/Users/wst15/Documents/websdk-sample-react/src/components/ParticipantList.tsx"],"names":["React","useState","useEffect","Button","Icon","useRecoilState","Container","Draggable","selected","selectedp","liveParticipants","ParticipantList","setSelected","participantsData","showSelected","setShowSelected","select","name","filter","item","id","length","reorderSelection","event","copy","splice","removedIndex","addedIndex","Selected","e","map","p","title","icon","Selector","person","userId","userName","muted","show","clearSelected"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Button, Icon } from 'semantic-ui-react'\nimport { displayed } from '../data/displayedParticipants'\nimport { useRecoilState } from 'recoil'\nimport { Container, Draggable } from 'react-smooth-dnd';\nimport { selected as selectedp } from '../data/selected'\nimport {ParticipantsData} from '../types/types'\nimport { liveParticipants } from '../data/liveParticipants'\n\nexport const ParticipantList = () => {\n    const [selected, setSelected] = useRecoilState<ParticipantsData[]>(selectedp);\n    const [participantsData] = useRecoilState(liveParticipants);\n    const [showSelected, setShowSelected] = useState(false);\n\n    useEffect(() => { //Remove default recoil value - do this in a cleaner way\n      setSelected([])\n     }, []);\n\n    const select = (name: ParticipantsData) => { //select individuals from list\n        if ((selected.filter((item:ParticipantsData) => item.id === name.id)).length < 1) {\n            setSelected([...selected,name])\n        }\n        else {\n            setSelected(selected.filter((item:ParticipantsData) => item.id !== name.id))\n        }\n    }\n\n    const reorderSelection = (event: any) => { //reorder selection on drag\n        let copy = [...selected]\n        copy.splice(event.removedIndex, 1); //remove one item where we pick element from\n        copy.splice(event.addedIndex, 0, selected[event.removedIndex]); //add removed item to new position\n        setSelected(copy)\n    }\n\n    const Selected = () => {\n        return (\n            <Button.Group fluid basic vertical className='ParticipantButtons'>\n                <Container dragHandleSelector=\".column-drag-handle\" onDrop={e => reorderSelection(e)}>\n                    {selected.map((p:ParticipantsData) => {\n                        return (\n                            <Draggable key={p.id}>\n                                <Button className=\"draggable-item\" active={true}>\n                                    <span className=\"column-drag-handle\">\n                                        <div className='left'>\n                                            <Icon name='edit' />\n                                            {p.title}\n                                        </div>\n                                        <div className='right'>\n                                            <Icon color={p.icon} name='wifi' />\n                                            <Icon name='mute' />\n                                        &#x2630;\n                                    </div>\n                                    </span>\n                                </Button>\n                            </Draggable>\n                        );\n                    })}\n                </Container>\n            </Button.Group>\n        )\n    }\n\n    const Selector = () => {\n        return (<Button.Group fluid basic vertical className='ParticipantButtons'>\n            {participantsData.map((person:any) =>\n                <Button \n                key={person.userId} \n                onClick={() => { select(person) }} \n                active={selected.filter((item)=> item.userId === person.userId).length !=0 ? true : false}\n                >\n                    <div>\n                        <div className='left'>\n                            <Icon name='edit' />\n                            {person.userName}\n                        </div> \n                        <div className='right'>\n                            <Icon color='green' name='wifi' />\n                            <Icon name={person.muted ? 'mute' : 'unmute'} />\n                        </div>\n                    </div>\n                </Button>)}\n        </Button.Group>\n        )\n    }\n    const show = () => {\n        if (showSelected) {\n            setShowSelected(false)\n        }\n        else {\n            setShowSelected(true)\n        }\n    }\n    const clearSelected = () => {\n        setSelected([])\n      }\n    return (\n        <>\n            <Button onClick={() => show()}>{showSelected ? 'Show All' : 'Show Selected'}</Button>\n            {selected.length>0 ? <Button color='red' onClick={() => clearSelected()}>Clear Selection</Button> : <></>}\n            { showSelected ? <Selected /> : <Selector />}\n        </>)\n}\n"]},"metadata":{},"sourceType":"module"}