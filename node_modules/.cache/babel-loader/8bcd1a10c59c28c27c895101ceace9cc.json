{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/wst15/Documents/websdk-react-app/src/components/Preview.js\",\n    _s = $RefreshSig$();\n\nimport { Grid, Icon, Button } from 'semantic-ui-react';\nimport { useRecoilState } from 'recoil';\nimport React, { useEffect, useState } from 'react';\nimport { selected } from '../data/selected';\nimport { config } from '../data/config';\nimport { displayed } from '../data/displayedParticipants';\nimport { muteIndiv } from './Zoom';\nexport const Preview = () => {\n  _s();\n\n  const [selectedState, setSelected] = useRecoilState(selected);\n  const [wh, setwh] = useState(0);\n  const [cf] = useRecoilState(config);\n  const [participantsData] = useRecoilState(displayed);\n  useEffect(() => {\n    // recalculate number of rows/ columns when selections change\n    setwh(Math.ceil(Math.sqrt(selectedState === null || selectedState === void 0 ? void 0 : selectedState.length)) ? Math.ceil(Math.sqrt(selectedState === null || selectedState === void 0 ? void 0 : selectedState.length)) : 1); //let h:number = (Math.ceil(selectedState.length / w) ? Math.ceil(selectedState.length / w) : 1)\n  }, [selectedState]);\n  useEffect(() => {\n    // recalculate number of rows/ columns when selections change\n    setwh(Math.ceil(Math.sqrt(participantsData === null || participantsData === void 0 ? void 0 : participantsData.length)) ? Math.ceil(Math.sqrt(participantsData === null || participantsData === void 0 ? void 0 : participantsData.length)) : 1); //let h:number = (Math.ceil(selectedState.length / w) ? Math.ceil(selectedState.length / w) : 1)\n  }, [participantsData]);\n\n  const removeFromState = obj => {\n    //filter out removed item\n    setSelected(selectedState.filter(item => item.userId !== obj.userId));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        columns: wh,\n        children: cf ? selectedState === null || selectedState === void 0 ? void 0 : selectedState.map(sel => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Grid.Column, {\n            padded: \"false\",\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              icon: true,\n              className: \"right\",\n              onClick: () => removeFromState(sel),\n              children: /*#__PURE__*/_jsxDEV(Icon, {\n                name: \"close\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 41,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Icon, {\n              name: \"bars\",\n              size: \"big\",\n              className: \"left\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"VideoStream\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"PreviewFooter\",\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                className: \"left\",\n                children: [sel.userName, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Icon, {\n                className: \"right\",\n                name: sel.muted ? 'mute' : 'unmute'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 17\n            }, this)]\n          }, sel.userId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 15\n          }, this)\n        }, void 0, false)) : participantsData === null || participantsData === void 0 ? void 0 : participantsData.map(sel => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Grid.Column, {\n            padded: \"false\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"PreviewFooter\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"PreviewFooterContents\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"left\",\n                  children: [sel.userName, \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 59,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Icon, {\n                  className: \"right\",\n                  name: sel.muted ? 'mute' : 'unmute',\n                  color: sel.muted ? 'red' : 'green',\n                  onClick: () => muteIndiv(sel.userId, sel.muted ? false : true),\n                  size: \"large\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 60,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 17\n            }, this)\n          }, 'a' + sel.userId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this)\n        }, void 0, false))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Preview, \"oz/gJcsBgPqEAUgh0dXik+asY3w=\", false, function () {\n  return [useRecoilState, useRecoilState, useRecoilState];\n});\n\n_c = Preview;\n\nvar _c;\n\n$RefreshReg$(_c, \"Preview\");","map":{"version":3,"sources":["/Users/wst15/Documents/websdk-react-app/src/components/Preview.js"],"names":["Grid","Icon","Button","useRecoilState","React","useEffect","useState","selected","config","displayed","muteIndiv","Preview","selectedState","setSelected","wh","setwh","cf","participantsData","Math","ceil","sqrt","length","removeFromState","obj","filter","item","userId","map","sel","userName","muted"],"mappings":"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","sourcesContent":["import { Grid, Icon, Button } from 'semantic-ui-react'\nimport { useRecoilState } from 'recoil'\nimport React, { useEffect, useState } from 'react'\nimport { selected } from '../data/selected'\nimport { config } from '../data/config'\nimport { displayed } from '../data/displayedParticipants';\nimport { muteIndiv } from './Zoom'\n\n\nexport const Preview = () => {\n  const [selectedState, setSelected] = useRecoilState(selected);\n  const [wh, setwh] = useState(0);\n  const [cf,] = useRecoilState(config);\n  const [participantsData] = useRecoilState(displayed);\n\n  useEffect(() => { // recalculate number of rows/ columns when selections change\n    setwh((Math.ceil(Math.sqrt(selectedState?.length)) ? Math.ceil(Math.sqrt(selectedState?.length)) : 1))\n    //let h:number = (Math.ceil(selectedState.length / w) ? Math.ceil(selectedState.length / w) : 1)\n  }, [selectedState]);\n\n  useEffect(() => { // recalculate number of rows/ columns when selections change\n    setwh((Math.ceil(Math.sqrt(participantsData?.length)) ? Math.ceil(Math.sqrt(participantsData?.length)) : 1))\n    //let h:number = (Math.ceil(selectedState.length / w) ? Math.ceil(selectedState.length / w) : 1)\n  }, [participantsData]);\n  \n  const removeFromState = (obj) => { //filter out removed item\n    setSelected(selectedState.filter((item) => item.userId !== obj.userId))\n  }\n\n  return (\n    <>\n      <div className='left'>\n        <Grid columns={wh}>\n        \n          {cf?\n            \n            selectedState?.map((sel) =>\n            <>\n              <Grid.Column padded=\"false\" key={sel.userId}>\n                <Button icon className='right' onClick={() => removeFromState(sel)}>\n                  <Icon name='close' />\n                </Button>\n                <Icon name='bars' size='big' className='left' />\n                <div className='VideoStream'></div>\n                <div className='PreviewFooter'>\n                  <h5 className='left'>{sel.userName} </h5>\n                  <Icon className='right' name={sel.muted ? 'mute' : 'unmute'} />\n                </div>\n              </Grid.Column>\n            </>\n          )                                \n            :            \n            participantsData?.map((sel) =>\n            <>\n            \n              <Grid.Column padded=\"false\" key={'a'+sel.userId}>\n                <div className='PreviewFooter'>\n                <div className='PreviewFooterContents'>\n                  <p className='left'>{sel.userName} </p>\n                  <Icon\n                  className='right'\n                    name={sel.muted ? 'mute' : 'unmute'}\n                    color={sel.muted ? 'red' : 'green'}\n                    onClick={() => muteIndiv(sel.userId, sel.muted ? false : true)}\n                    size='large'\n                ></Icon>\n                </div>\n                </div>\n              </Grid.Column>\n            </>\n          )}\n        </Grid>\n      </div>\n    </>\n  )\n}"]},"metadata":{},"sourceType":"module"}