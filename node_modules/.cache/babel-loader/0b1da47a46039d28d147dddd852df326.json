{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/wst15/Documents/websdk-sample-react/src/components/ParticipantList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Button, Icon } from 'semantic-ui-react';\nimport { useRecoilState } from 'recoil';\nimport { Container, Draggable } from 'react-smooth-dnd';\nimport { selected as selectedp } from '../data/selected';\nimport { liveParticipants } from '../data/liveParticipants';\nimport { muteIndiv } from './Zoom';\nexport const ParticipantList = () => {\n  _s();\n\n  const [selected, setSelected] = useRecoilState(selectedp);\n  const [participantsData] = useRecoilState(liveParticipants);\n  const [showSelected, setShowSelected] = useState(false);\n\n  const select = name => {\n    //select individuals from list\n    if (selected.filter(item => item.userId === name.userId).length < 1) {\n      setSelected([...selected, name]);\n    } else {\n      setSelected(selected.filter(item => item.userId !== name.userId));\n    }\n  };\n\n  const reorderSelection = event => {\n    //reorder selection on drag\n    let copy = [...selected];\n    copy.splice(event.removedIndex, 1); //remove one item where we pick element from\n\n    copy.splice(event.addedIndex, 0, selected[event.removedIndex]); //add removed item to new position\n\n    setSelected(copy);\n  };\n\n  const Selected = () => {\n    return /*#__PURE__*/_jsxDEV(Button.Group, {\n      fluid: true,\n      basic: true,\n      vertical: true,\n      className: \"ParticipantButtons\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        dragHandleSelector: \".column-drag-handle\",\n        onDrop: e => reorderSelection(e),\n        children: selected.map(p => {\n          return /*#__PURE__*/_jsxDEV(Draggable, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              className: \"draggable-item\",\n              active: true,\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"column-drag-handle\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"left\",\n                  children: [/*#__PURE__*/_jsxDEV(Icon, {\n                    name: \"edit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 40,\n                    columnNumber: 45\n                  }, this), p.userName]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 39,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"right\",\n                  children: [/*#__PURE__*/_jsxDEV(Icon, {\n                    name: p.muted ? 'mute' : 'unmute'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 44,\n                    columnNumber: 41\n                  }, this), \"\\u2630\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 43,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 38,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 33\n            }, this)\n          }, p.userId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this);\n  };\n\n  const Selector = () => {\n    return /*#__PURE__*/_jsxDEV(Button.Group, {\n      fluid: true,\n      basic: true,\n      vertical: true,\n      className: \"ParticipantButtons\",\n      children: participantsData.map(person => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => {\n            select(person);\n          },\n          active: selected.filter(item => item.userId === person.userId).length != 0 ? true : false,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"left\",\n              children: [/*#__PURE__*/_jsxDEV(Icon, {\n                name: \"edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 29\n              }, this), person.userName]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 21\n          }, this)\n        }, person.userId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            icon: true,\n            onClick: () => muteIndiv(person.userId, person.muted ? false : true),\n            children: /*#__PURE__*/_jsxDEV(Icon, {\n              name: person.muted ? 'mute' : 'unmute'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }, this);\n  };\n\n  const show = () => {\n    if (showSelected) {\n      setShowSelected(false);\n    } else {\n      setShowSelected(true);\n    }\n  };\n\n  const clearSelected = () => {\n    setSelected([]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => show(),\n      children: showSelected ? 'Show All' : 'Show Selected'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), selected.length > 0 ? /*#__PURE__*/_jsxDEV(Button, {\n      color: \"red\",\n      onClick: () => clearSelected(),\n      children: \"Clear Selection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 34\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), showSelected ? /*#__PURE__*/_jsxDEV(Selected, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 30\n    }, this) : /*#__PURE__*/_jsxDEV(Selector, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 45\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ParticipantList, \"NUmmOAdm1K7DdLX3CH3aqiMjLls=\", false, function () {\n  return [useRecoilState, useRecoilState];\n});\n\n_c = ParticipantList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ParticipantList\");","map":{"version":3,"sources":["/Users/wst15/Documents/websdk-sample-react/src/components/ParticipantList.js"],"names":["React","useState","useEffect","Button","Icon","useRecoilState","Container","Draggable","selected","selectedp","liveParticipants","muteIndiv","ParticipantList","setSelected","participantsData","showSelected","setShowSelected","select","name","filter","item","userId","length","reorderSelection","event","copy","splice","removedIndex","addedIndex","Selected","e","map","p","userName","muted","Selector","person","show","clearSelected"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Button, Icon } from 'semantic-ui-react'\nimport { useRecoilState } from 'recoil'\nimport { Container, Draggable } from 'react-smooth-dnd';\nimport { selected as selectedp } from '../data/selected'\nimport { liveParticipants } from '../data/liveParticipants'\nimport {muteIndiv} from './Zoom'\n\nexport const ParticipantList = () => {\n    const [selected, setSelected] = useRecoilState(selectedp);\n    const [participantsData] = useRecoilState(liveParticipants);\n    const [showSelected, setShowSelected] = useState(false);\n\n    const select = (name) => { //select individuals from list\n        if ((selected.filter((item) => item.userId === name.userId)).length < 1) {\n            setSelected([...selected,name])\n        }\n        else {\n            setSelected(selected.filter((item) => item.userId !== name.userId))\n        }\n    }\n\n    const reorderSelection = (event) => { //reorder selection on drag\n        let copy = [...selected]\n        copy.splice(event.removedIndex, 1); //remove one item where we pick element from\n        copy.splice(event.addedIndex, 0, selected[event.removedIndex]); //add removed item to new position\n        setSelected(copy)\n    }\n\n    const Selected = () => {\n        return (\n            <Button.Group fluid basic vertical className='ParticipantButtons'>\n                <Container dragHandleSelector=\".column-drag-handle\" onDrop={e => reorderSelection(e)}>\n                    {selected.map((p) => {\n                        return (\n                            <Draggable key={p.userId}>\n                                <Button className=\"draggable-item\" active={true}>\n                                    <span className=\"column-drag-handle\">\n                                        <div className='left'>\n                                            <Icon name='edit' />\n                                            {p.userName}\n                                        </div>\n                                        <div className='right'>\n                                        <Icon name={p.muted ? 'mute' : 'unmute'} />\n                                        &#x2630;\n                                    </div>\n                                    </span>\n                                </Button>\n                            </Draggable>\n                        );\n                    })}\n                </Container>\n            </Button.Group>\n        )\n    }\n\n    const Selector = () => {\n        return (<Button.Group fluid basic vertical className='ParticipantButtons'>\n            {participantsData.map((person) =>\n            <>\n                <Button \n                key={person.userId} \n                onClick={() => { select(person) }} \n                active={selected.filter((item)=> item.userId === person.userId).length !=0 ? true : false}\n                >\n                    <div>\n                        <div className='left'>\n                            <Icon name='edit' />\n                            {person.userName}\n                        </div> \n                        \n                    </div>\n                </Button>\n                <div className='right'>\n                            <Button icon onClick={()=>muteIndiv(person.userId,person.muted ? false : true)}>\n                            <Icon name={person.muted ? 'mute' : 'unmute'} />\n                            </Button>\n                        </div>\n                        </>\n                )}\n        </Button.Group>\n        )\n    }\n    const show = () => {\n        if (showSelected) {\n            setShowSelected(false)\n        }\n        else {\n            setShowSelected(true)\n        }\n    }\n    const clearSelected = () => {\n        setSelected([])\n      }\n\n    return (\n        <>\n            <Button onClick={() => show()}>{showSelected ? 'Show All' : 'Show Selected'}</Button>\n            {selected.length>0 ? <Button color='red' onClick={() => clearSelected()}>Clear Selection</Button> : <></>}\n            { showSelected ? <Selected /> : <Selector />}\n        </>)\n}\n"]},"metadata":{},"sourceType":"module"}