{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/wst15/Documents/websdk-react-app/src/components/ParticipantList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { displayed } from '../data/displayedParticipants';\nimport { Participant } from './Participant';\nimport './participant.css';\nimport { muteIndiv, rename } from './Zoom';\nimport { Icon } from 'semantic-ui-react';\nexport const ParticipantList = () => {\n  _s();\n\n  const [editingId, setEditingId] = useState(-1);\n  const [participantsData] = useRecoilState(displayed);\n  const [newName, setNewName] = useState('');\n\n  const renamePerson = () => {\n    //Goes off the assumption editingId is selected at the point of running. You could pass in ID as param.\n    var userObj = participantsData.find(x => x.userId === editingId);\n    userObj ? console.log(userObj) //rename(userObj.id, userObj.userName, newName)\n    : console.log(\"User not found. Handle error. Maybe they're clicking save when somehow when editingId is -1 or something or maybe even the person has left the call and is no longer in participantsData\");\n    setEditingId(-1);\n    setNewName('');\n  };\n\n  const handleSetEditId = newId => {\n    editingId !== newId ? setEditingId(newId) : setEditingId(-1); //So it doesnt carry over from previous incomplete edit\n\n    setNewName('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: participantsData.map(person => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"participant-container\",\n      children: [/*#__PURE__*/_jsxDEV(Icon, {\n        name: \"edit\",\n        onClick: () => handleSetEditId(person.userId)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Participant, {\n        id: person.userId,\n        originalName: person.userName,\n        muted: person.muted,\n        isHost: person.isHost,\n        editMode: editingId === person.userId,\n        newName: newName,\n        setNewName: setNewName,\n        saveNewName: renamePerson\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 25\n      }, this)]\n    }, person.userId, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 21\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ParticipantList, \"/GxU8GBrgoEDXrI93OmZN8Rx8V4=\", false, function () {\n  return [useRecoilState];\n});\n\n_c = ParticipantList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ParticipantList\");","map":{"version":3,"sources":["/Users/wst15/Documents/websdk-react-app/src/components/ParticipantList.js"],"names":["React","useState","useRecoilState","displayed","Participant","muteIndiv","rename","Icon","ParticipantList","editingId","setEditingId","participantsData","newName","setNewName","renamePerson","userObj","find","x","userId","console","log","handleSetEditId","newId","map","person","userName","muted","isHost"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,cAAT,QAA+B,QAA/B;AACA,SAASC,SAAT,QAA0B,+BAA1B;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAO,mBAAP;AACA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,QAAlC;AACA,SAASC,IAAT,QAAqB,mBAArB;AAEA,OAAO,MAAMC,eAAe,GAAG,MAAM;AAAA;;AACjC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,CAAC,CAAF,CAA1C;AACA,QAAM,CAACU,gBAAD,IAAqBT,cAAc,CAACC,SAAD,CAAzC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,EAAD,CAAtC;;AAEA,QAAMa,YAAY,GAAG,MAAM;AACvB;AACA,QAAIC,OAAO,GAAGJ,gBAAgB,CAACK,IAAjB,CAAsBC,CAAC,IAAIA,CAAC,CAACC,MAAF,KAAaT,SAAxC,CAAd;AACCM,IAAAA,OAAD,GAEII,OAAO,CAACC,GAAR,CAAYL,OAAZ,CAFJ,CAGI;AAHJ,MAKII,OAAO,CAACC,GAAR,CAAY,0LAAZ,CALJ;AAOAV,IAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAG,IAAAA,UAAU,CAAC,EAAD,CAAV;AACH,GAZD;;AAcA,QAAMQ,eAAe,GAAIC,KAAD,IAAW;AAC9Bb,IAAAA,SAAS,KAAKa,KAAf,GAAwBZ,YAAY,CAACY,KAAD,CAApC,GAA8CZ,YAAY,CAAC,CAAC,CAAF,CAA1D,CAD+B,CAE/B;;AACAG,IAAAA,UAAU,CAAC,EAAD,CAAV;AACH,GAJD;;AAMA,sBACI;AAAA,cAEQF,gBAAgB,CAACY,GAAjB,CAAsBC,MAAD,iBACjB;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA,8BACI,QAAC,IAAD;AACI,QAAA,IAAI,EAAC,MADT;AAEI,QAAA,OAAO,EAAE,MAAMH,eAAe,CAACG,MAAM,CAACN,MAAR;AAFlC;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI,QAAC,WAAD;AACI,QAAA,EAAE,EAAEM,MAAM,CAACN,MADf;AAEI,QAAA,YAAY,EAAEM,MAAM,CAACC,QAFzB;AAGI,QAAA,KAAK,EAAED,MAAM,CAACE,KAHlB;AAII,QAAA,MAAM,EAAEF,MAAM,CAACG,MAJnB;AAKI,QAAA,QAAQ,EAAGlB,SAAS,KAAKe,MAAM,CAACN,MALpC;AAMI,QAAA,OAAO,EAAEN,OANb;AAOI,QAAA,UAAU,EAAEC,UAPhB;AAQI,QAAA,WAAW,EAAEC;AARjB;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA,OAA4CU,MAAM,CAACN,MAAnD;AAAA;AAAA;AAAA;AAAA,YADJ;AAFR;AAAA;AAAA;AAAA;AAAA,UADJ;AAuBH,CAhDM;;GAAMV,e;UAEkBN,c;;;KAFlBM,e","sourcesContent":["import React, { useState } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { displayed } from '../data/displayedParticipants';\nimport { Participant } from './Participant';\nimport './participant.css';\nimport { muteIndiv, rename } from './Zoom'\nimport { Icon } from 'semantic-ui-react'\n\nexport const ParticipantList = () => {\n    const [editingId, setEditingId] = useState(-1);\n    const [participantsData] = useRecoilState(displayed);\n    const [newName, setNewName] = useState('');\n\n    const renamePerson = () => {\n        //Goes off the assumption editingId is selected at the point of running. You could pass in ID as param.\n        var userObj = participantsData.find(x => x.userId === editingId);\n        (userObj)\n            ?\n            console.log(userObj)\n            //rename(userObj.id, userObj.userName, newName)\n            :\n            console.log(\"User not found. Handle error. Maybe they're clicking save when somehow when editingId is -1 or something or maybe even the person has left the call and is no longer in participantsData\")\n\n        setEditingId(-1);\n        setNewName('');\n    }\n\n    const handleSetEditId = (newId) => {\n        (editingId !== newId) ? setEditingId(newId) : setEditingId(-1);\n        //So it doesnt carry over from previous incomplete edit\n        setNewName('');\n    }\n\n    return (\n        <div>\n            {\n                participantsData.map((person) =>\n                    <div className='participant-container' key={person.userId} >\n                        <Icon\n                            name='edit'\n                            onClick={() => handleSetEditId(person.userId)}>\n                        </Icon>\n                        <Participant\n                            id={person.userId}\n                            originalName={person.userName}\n                            muted={person.muted}\n                            isHost={person.isHost}\n                            editMode={(editingId === person.userId)}\n                            newName={newName}\n                            setNewName={setNewName}\n                            saveNewName={renamePerson}\n                        />\n                    </div>\n                )}\n        </div>\n    )\n}\n\n\n"]},"metadata":{},"sourceType":"module"}