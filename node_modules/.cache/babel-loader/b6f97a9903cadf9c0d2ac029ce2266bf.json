{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/wst15/Documents/websdk-react-app/src/components/ParticipantList.js\",\n    _s = $RefreshSig$();\n\nimport { displayed } from '../data/displayedParticipants';\nimport { Participant } from './Participant';\nimport './participant.css';\nimport React, { useState } from 'react';\nimport { Button, Icon } from 'semantic-ui-react';\nimport { useRecoilState } from 'recoil';\nimport { selectedAll } from '../data/selectedAll';\nimport { selected as selectedids } from '../data/selected';\nimport { liveParticipants } from \"../data/liveParticipants\";\nimport { muteIndiv } from './Zoom';\nimport { rename } from './Zoom';\nimport { config } from '../data/config'; //participants-items__buttons\n\nexport const ParticipantList = () => {\n  _s();\n\n  const [liveP, setLiveP] = useRecoilState(liveParticipants);\n  const [editingId, setEditingId] = useState(-1);\n  const [participantsData] = useRecoilState(displayed);\n  const [newName, setNewName] = useState('');\n  const [cf] = useRecoilState(config);\n  const [, setSelectedIds] = useRecoilState(selectedids);\n  const [selected, setSelected] = useRecoilState(selectedAll);\n  const [showSelected, setShowSelected] = useState(false);\n\n  const renamePerson = () => {\n    //Goes off the assumption editingId is selected at the point of running. You could pass in ID as param.\n    var userObj = participantsData.find(x => x.userId === editingId);\n    userObj ? rename(userObj.userId, userObj.userName, newName) : console.log(\"User not found. Handle error. Maybe they're clicking save when somehow when editingId is -1 or something or maybe even the person has left the call and is no longer in participantsData\");\n    setEditingId(-1);\n    setNewName('');\n  };\n\n  const handleSetEditId = newId => {\n    editingId !== newId ? setEditingId(newId) : setEditingId(-1); //So it doesnt carry over from previous incomplete edit\n\n    setNewName('');\n  }; // const select = (name) => { //select individuals from list\n  //     if ((selected.filter((item) => item.userId === name.userId)).length < 1) {\n  //         setSelected([...selected, name])\n  //     }\n  //     else {\n  //         setSelected(selected.filter((item) => item.userId !== name.userId))\n  //     }\n  // }\n\n\n  const show = () => {\n    if (showSelected) {\n      setShowSelected(false);\n    } else {\n      setShowSelected(true);\n    }\n  };\n\n  const clearSelected = () => {\n    setSelected([]);\n    setSelectedIds([]);\n  };\n\n  const handlePin = id => {\n    //is this in selected?\n    //if yes:\n    //*******DONE*******remove from selected \n    //calculate relevant number = ???\n    //unpin relevant number from middle canvas\n    //if no:\n    //*******DONE*******add to selected\n    //calculate relevant number = liveParticipants minus selected IDs\n    //pin relevant number from top canvas\n    if (selected.includes(id)) {\n      setSelected([...selected.filter(item => item !== id)]);\n      console.log('id has been selected before');\n    }\n\n    if (!selected.includes(id)) {\n      setSelected([...selected, id]);\n      console.log('id has NOT been selected before');\n      console.log('selected', selectedAll);\n      let intersection = selectedAll === null || selectedAll === void 0 ? void 0 : selectedAll.filter(x => liveP === null || liveP === void 0 ? void 0 : liveP.includes(x));\n      console.log('not selected', intersection);\n    }\n  };\n\n  const Selected = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: selected === null || selected === void 0 ? void 0 : selected.map((person, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"participant-container\",\n          children: [/*#__PURE__*/_jsxDEV(Icon, {\n            name: \"edit\",\n            onClick: () => handleSetEditId(person.userId)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Participant, {\n            idx: index,\n            id: person.userId,\n            originalName: person.userName,\n            muted: person.muted,\n            isHost: person.isHost,\n            editMode: editingId === person.userId,\n            newName: newName,\n            setNewName: setNewName,\n            saveNewName: renamePerson,\n            cf: cf\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"right\",\n            children: [person.isHost ? /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Host\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 55\n            }, this) : 'Guest', /*#__PURE__*/_jsxDEV(Icon, {\n              name: person.muted ? 'mute' : 'unmute',\n              color: person.muted ? 'red' : 'green',\n              onClick: () => muteIndiv(person.userId, person.muted ? false : true),\n              size: \"large\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 33\n            }, this), cf && liveP.length > 2 ? /*#__PURE__*/_jsxDEV(Icon, {\n              name: 'map pin',\n              onClick: () => handlePin(person.userId),\n              size: \"large\",\n              color: selected.find(x => x === person.userId) ? 'red' : 'green'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 41\n            }, this) : '']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 29\n          }, this)]\n        }, person.userId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [cf ? /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => show(),\n      children: showSelected ? 'Show All' : 'Show Selected'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 19\n    }, this) : '', selected.length > 0 ? /*#__PURE__*/_jsxDEV(Button, {\n      color: \"red\",\n      onClick: () => clearSelected(),\n      children: \"Clear Selection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 36\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), showSelected ? /*#__PURE__*/_jsxDEV(Selected, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 30\n    }, this) : participantsData === null || participantsData === void 0 ? void 0 : participantsData.map((person, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"participant-container\",\n      children: [/*#__PURE__*/_jsxDEV(Icon, {\n        name: \"edit\",\n        onClick: () => handleSetEditId(person.userId)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Participant, {\n        idx: index,\n        id: person.userId,\n        originalName: person.userName,\n        muted: person.muted,\n        isHost: person.isHost,\n        editMode: editingId === person.userId,\n        newName: newName,\n        setNewName: setNewName,\n        saveNewName: renamePerson,\n        cf: cf\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 25\n      }, this)]\n    }, person.userId, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true);\n};\n\n_s(ParticipantList, \"QFPec8FSEloRHlLzCDiz3pIAIOc=\", false, function () {\n  return [useRecoilState, useRecoilState, useRecoilState, useRecoilState, useRecoilState];\n});\n\n_c = ParticipantList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ParticipantList\");","map":{"version":3,"sources":["/Users/wst15/Documents/websdk-react-app/src/components/ParticipantList.js"],"names":["displayed","Participant","React","useState","Button","Icon","useRecoilState","selectedAll","selected","selectedids","liveParticipants","muteIndiv","rename","config","ParticipantList","liveP","setLiveP","editingId","setEditingId","participantsData","newName","setNewName","cf","setSelectedIds","setSelected","showSelected","setShowSelected","renamePerson","userObj","find","x","userId","userName","console","log","handleSetEditId","newId","show","clearSelected","handlePin","id","includes","filter","item","intersection","Selected","map","person","index","muted","isHost","length"],"mappings":"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","sourcesContent":["import { displayed } from '../data/displayedParticipants';\nimport { Participant } from './Participant';\nimport './participant.css';\nimport React, { useState } from 'react'\nimport { Button, Icon } from 'semantic-ui-react'\nimport { useRecoilState } from 'recoil'\nimport { selectedAll } from '../data/selectedAll'\nimport { selected as selectedids } from '../data/selected'\nimport { liveParticipants } from \"../data/liveParticipants\";\nimport { muteIndiv } from './Zoom'\n\nimport { rename } from './Zoom'\nimport { config } from '../data/config'\n//participants-items__buttons\n\nexport const ParticipantList = () => {\n    const [liveP, setLiveP] = useRecoilState(liveParticipants);\n\n    const [editingId, setEditingId] = useState(-1);\n    const [participantsData] = useRecoilState(displayed);\n    const [newName, setNewName] = useState('');\n    const [cf,] = useRecoilState(config);\n    const [, setSelectedIds] = useRecoilState(selectedids);\n\n    const [selected, setSelected] = useRecoilState(selectedAll);\n    const [showSelected, setShowSelected] = useState(false);\n\n    const renamePerson = () => {\n        //Goes off the assumption editingId is selected at the point of running. You could pass in ID as param.\n        var userObj = participantsData.find(x => x.userId === editingId);\n        (userObj)\n            ?\n\n            rename(userObj.userId, userObj.userName, newName)\n            :\n            console.log(\"User not found. Handle error. Maybe they're clicking save when somehow when editingId is -1 or something or maybe even the person has left the call and is no longer in participantsData\")\n\n        setEditingId(-1);\n        setNewName('');\n    }\n\n    const handleSetEditId = (newId) => {\n        (editingId !== newId) ? setEditingId(newId) : setEditingId(-1);\n        //So it doesnt carry over from previous incomplete edit\n        setNewName('');\n    }\n\n    // const select = (name) => { //select individuals from list\n    //     if ((selected.filter((item) => item.userId === name.userId)).length < 1) {\n    //         setSelected([...selected, name])\n    //     }\n    //     else {\n    //         setSelected(selected.filter((item) => item.userId !== name.userId))\n    //     }\n    // }\n\n\n    const show = () => {\n        if (showSelected) {\n            setShowSelected(false)\n        }\n        else {\n            setShowSelected(true)\n        }\n    }\n    const clearSelected = () => {\n        setSelected([])\n        setSelectedIds([])\n    }\n\n\n\n\n\n\n\n\n\n\n\n    const handlePin = (id) => {\n        //is this in selected?\n        //if yes:\n        //*******DONE*******remove from selected \n        //calculate relevant number = ???\n        //unpin relevant number from middle canvas\n\n        //if no:\n        //*******DONE*******add to selected\n        //calculate relevant number = liveParticipants minus selected IDs\n        //pin relevant number from top canvas\n\n\n        if (selected.includes(id)) {\n            setSelected([...selected.filter(item => item !== id)])\n            console.log('id has been selected before')\n        }\n        if (!selected.includes(id)) {\n            setSelected([...selected, id])\n            console.log('id has NOT been selected before')\n            console.log('selected', selectedAll)\n            let intersection = selectedAll?.filter(x => liveP?.includes(x));\n\n            console.log('not selected', intersection)\n\n        }\n    }\n    const Selected = () => {\n        return (\n            <>\n                {selected?.map((person, index) => {\n\n                    return (\n                        <div className='participant-container' key={person.userId} >\n                            <Icon\n                                name='edit'\n                                onClick={() => handleSetEditId(person.userId)}>\n                            </Icon>\n                            <Participant\n                                idx={index}\n                                id={person.userId}\n                                originalName={person.userName}\n                                muted={person.muted}\n                                isHost={person.isHost}\n                                editMode={(editingId === person.userId)}\n                                newName={newName}\n                                setNewName={setNewName}\n                                saveNewName={renamePerson}\n                                cf={cf}\n                            />\n                            <div className='right'>\n                                {\n                                    (person.isHost) ? <b>Host</b> : 'Guest'\n                                }\n                                <Icon\n                                    name={person.muted ? 'mute' : 'unmute'}\n                                    color={person.muted ? 'red' : 'green'}\n                                    onClick={() => muteIndiv(person.userId, person.muted ? false : true)}\n                                    size='large'\n                                ></Icon>\n\n                                {\n                                    cf && liveP.length > 2 ?\n                                        <Icon\n                                            name={'map pin'}\n                                            onClick={() => handlePin(person.userId)}\n                                            size='large'\n                                            color={selected.find(x => x === person.userId) ? 'red' : 'green'}\n                                        ></Icon>\n                                        : ''\n                                }\n                            </div>\n                        </div>\n                    );\n                })}\n            </>\n        )\n    }\n\n\n    return (\n        <>\n            {cf ? <Button onClick={() => show()}>{showSelected ? 'Show All' : 'Show Selected'}</Button> : ''}\n            {selected.length > 0 ? <Button color='red' onClick={() => clearSelected()}>Clear Selection</Button> : <></>}\n            { showSelected ? <Selected /> :\n                participantsData?.map((person, index) =>\n                    <div className='participant-container' key={person.userId} >\n                        <Icon\n                            name='edit'\n                            onClick={() => handleSetEditId(person.userId)}>\n                        </Icon>\n                        <Participant\n                            idx={index}\n                            id={person.userId}\n                            originalName={person.userName}\n                            muted={person.muted}\n                            isHost={person.isHost}\n                            editMode={(editingId === person.userId)}\n                            newName={newName}\n                            setNewName={setNewName}\n                            saveNewName={renamePerson}\n                            cf={cf}\n                        />\n\n                    </div>\n                )}\n        </>)\n\n}\n\n\n"]},"metadata":{},"sourceType":"module"}