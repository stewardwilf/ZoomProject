{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/wst15/Documents/websdk-sample-react/src/components/ParticipantList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Button, Icon, Input, Form, List } from 'semantic-ui-react';\nimport { useRecoilState } from 'recoil';\nimport { Container, Draggable } from 'react-smooth-dnd';\nimport { selected as selectedp } from '../data/selected';\nimport { muteIndiv, rename } from './Zoom';\nimport { displayed } from '../data/displayedParticipants';\nexport const ParticipantList = () => {\n  _s();\n\n  const [selected, setSelected] = useRecoilState(selectedp);\n  const [participantsData] = useRecoilState(displayed);\n  const [showSelected, setShowSelected] = useState(false);\n  const [newname, setNewname] = useState({\n    'userId': '',\n    'oldName': '',\n    'newName': ''\n  });\n  const [ryan, setryan] = useState('');\n\n  const select = name => {\n    //select individuals from list\n    if (selected.filter(item => item.userId === name.userId).length < 1) {\n      setSelected([...selected, name]);\n    } else {\n      setSelected(selected.filter(item => item.userId !== name.userId));\n    }\n  };\n\n  const reorderSelection = event => {\n    //reorder selection on drag\n    let copy = [...selected];\n    copy.splice(event.removedIndex, 1); //remove one item where we pick element from\n\n    copy.splice(event.addedIndex, 0, selected[event.removedIndex]); //add removed item to new position\n\n    setSelected(copy);\n  };\n\n  const Selected = () => {\n    return /*#__PURE__*/_jsxDEV(Button.Group, {\n      fluid: true,\n      basic: true,\n      vertical: true,\n      className: \"ParticipantButtons\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        dragHandleSelector: \".column-drag-handle\",\n        onDrop: e => reorderSelection(e),\n        children: selected.map(p => {\n          return /*#__PURE__*/_jsxDEV(Draggable, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              className: \"draggable-item\",\n              active: true,\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"column-drag-handle\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"left\",\n                  children: [/*#__PURE__*/_jsxDEV(Icon, {\n                    name: \"edit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 42,\n                    columnNumber: 45\n                  }, this), p.userName]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 41,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"right\",\n                  children: [/*#__PURE__*/_jsxDEV(Icon, {\n                    name: p.muted ? 'mute' : 'unmute'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 46,\n                    columnNumber: 45\n                  }, this), \"\\u2630\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 45,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 40,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 33\n            }, this)\n          }, p.userId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renameTool = person => {\n    if (newname.userId) {\n      setNewname({ ...newname,\n        userId: '',\n        userName: '',\n        newName: ''\n      });\n    } else {\n      setNewname({ ...newname,\n        userId: person.userId,\n        userName: person.userName\n      });\n    }\n  };\n\n  const handleChange = value => {\n    console.log(value);\n    setNewname({ ...newname,\n      'newName': value\n    });\n  };\n\n  const x = 1;\n\n  const Selector = () => {\n    return /*#__PURE__*/_jsxDEV(List, {\n      divided: true,\n      children: participantsData.map(person => /*#__PURE__*/_jsxDEV(List.Item, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            icon: \"edit\",\n            onClick: () => renameTool(person)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 29\n          }, this), newname.userId === person.userId ? /*#__PURE__*/_jsxDEV(Form, {\n            onSubmit: () => rename(newname.userId, newname.userName, newname.newName),\n            children: /*#__PURE__*/_jsxDEV(Form.Group, {\n              children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n                name: \"newName\",\n                placeholder: \"hi\",\n                onChange: e => setryan(e.target.value),\n                value: ryan\n              }, 'key' + x, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Form.Button, {\n                content: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 33\n          }, this) : '', person.userName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right\",\n          children: /*#__PURE__*/_jsxDEV(Button.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              icon: true,\n              onClick: () => {\n                select(person);\n              } //active={selected.filter((item) => item.userId === person.userId).length != 0 ? true : false}\n              ,\n              children: /*#__PURE__*/_jsxDEV(Icon, {\n                name: (selected === null || selected === void 0 ? void 0 : selected.filter(sel => sel.userId === person.userId).length) > 0 ? 'remove circle' : 'add circle' //set to change dynamically\n                ,\n                color: (selected === null || selected === void 0 ? void 0 : selected.filter(sel => sel.userId === person.userId).length) > 0 ? 'red' : 'green'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              icon: true,\n              children: /*#__PURE__*/_jsxDEV(Icon, {\n                name: person.muted ? 'mute' : 'unmute',\n                onClick: () => muteIndiv(person.userId, person.muted ? false : true),\n                color: person.muted ? 'red' : 'green',\n                onClick: () => muteIndiv(person.userId, person.muted ? false : true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 25\n        }, this)]\n      }, x, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this);\n  };\n\n  const show = () => {\n    if (showSelected) {\n      setShowSelected(false);\n    } else {\n      setShowSelected(true);\n    }\n  };\n\n  const clearSelected = () => {\n    setSelected([]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => show(),\n      children: showSelected ? 'Show All' : 'Show Selected'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this), selected.length > 0 ? /*#__PURE__*/_jsxDEV(Button, {\n      color: \"red\",\n      onClick: () => clearSelected(),\n      children: \"Clear Selection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 36\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), showSelected ? /*#__PURE__*/_jsxDEV(Selected, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 30\n    }, this) : /*#__PURE__*/_jsxDEV(Selector, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 45\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ParticipantList, \"/yiDscp45C2g6AV/8q9pkzMXakA=\", false, function () {\n  return [useRecoilState, useRecoilState];\n});\n\n_c = ParticipantList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ParticipantList\");","map":{"version":3,"sources":["/Users/wst15/Documents/websdk-sample-react/src/components/ParticipantList.js"],"names":["React","useState","Button","Icon","Input","Form","List","useRecoilState","Container","Draggable","selected","selectedp","muteIndiv","rename","displayed","ParticipantList","setSelected","participantsData","showSelected","setShowSelected","newname","setNewname","ryan","setryan","select","name","filter","item","userId","length","reorderSelection","event","copy","splice","removedIndex","addedIndex","Selected","e","map","p","userName","muted","renameTool","person","newName","handleChange","value","console","log","x","Selector","target","sel","show","clearSelected"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Button, Icon, Input, Form, List } from 'semantic-ui-react'\nimport { useRecoilState } from 'recoil'\nimport { Container, Draggable } from 'react-smooth-dnd';\nimport { selected as selectedp } from '../data/selected'\nimport { muteIndiv, rename } from './Zoom'\nimport { displayed } from '../data/displayedParticipants'\n\nexport const ParticipantList = () => {\n    const [selected, setSelected] = useRecoilState(selectedp);\n    const [participantsData] = useRecoilState(displayed);\n    const [showSelected, setShowSelected] = useState(false);\n    const [newname, setNewname] = useState({ 'userId': '', 'oldName': '', 'newName': '' });\n    const [ryan, setryan] = useState('');\n\n    const select = (name) => { //select individuals from list\n        if ((selected.filter((item) => item.userId === name.userId)).length < 1) {\n            setSelected([...selected, name])\n        }\n        else {\n            setSelected(selected.filter((item) => item.userId !== name.userId))\n        }\n    }\n\n    const reorderSelection = (event) => { //reorder selection on drag\n        let copy = [...selected]\n        copy.splice(event.removedIndex, 1); //remove one item where we pick element from\n        copy.splice(event.addedIndex, 0, selected[event.removedIndex]); //add removed item to new position\n        setSelected(copy)\n    }\n\n    const Selected = () => {\n        return (\n            <Button.Group fluid basic vertical className='ParticipantButtons'>\n                <Container dragHandleSelector=\".column-drag-handle\" onDrop={e => reorderSelection(e)}>\n                    {selected.map((p) => {\n                        return (\n                            <Draggable key={p.userId}>\n                                <Button className=\"draggable-item\" active={true}>\n                                    <span className=\"column-drag-handle\">\n                                        <div className='left'>\n                                            <Icon name='edit' />\n                                            {p.userName}\n                                        </div>\n                                        <div className='right'>\n                                            <Icon name={p.muted ? 'mute' : 'unmute'} />\n                                        &#x2630;\n                                    </div>\n                                    </span>\n                                </Button>\n                            </Draggable>\n                        );\n                    })}\n                </Container>\n            </Button.Group>\n        )\n    }\n    const renameTool = (person) => {\n        if (newname.userId) {\n            setNewname({ ...newname, userId: '', userName: '', newName: '' })\n        }\n        else {\n            setNewname({ ...newname, userId: person.userId, userName: person.userName })\n        }\n    }\n    const handleChange = (value) => {\n        console.log(value)\n        setNewname({ ...newname, 'newName': value })\n    }\n    const x = 1\n\n    const Selector = () => {\n        return (\n            <List divided>\n                {participantsData.map((person) =>\n\n                    <List.Item key={x}>\n                        <div className='left'>\n                            <Button icon='edit' onClick={() => renameTool(person)}></Button>\n                            {newname.userId === person.userId ?\n                                <Form onSubmit={() => rename(newname.userId, newname.userName, newname.newName)}>\n                                    <Form.Group>\n                                        <Form.Input\n                                            key={'key' + x}\n                                            name='newName'\n                                            placeholder='hi'\n                                            onChange={(e)=>setryan(e.target.value)}\n                                            value={ryan}\n                                        />\n                                        <Form.Button content='Submit' />\n                                    </Form.Group>\n                                </Form> : ''}\n                            {person.userName}\n                        </div>\n                        <div className='right'>\n                            <Button.Group>\n                                <Button\n                                    icon\n                                    onClick={() => { select(person) }}\n                                //active={selected.filter((item) => item.userId === person.userId).length != 0 ? true : false}\n                                >\n                                    <Icon\n                                        name={selected?.filter((sel) => sel.userId === person.userId).length > 0 ? 'remove circle' : 'add circle'} //set to change dynamically\n                                        color={selected?.filter((sel) => sel.userId === person.userId).length > 0 ? 'red' : 'green'}>\n                                    </Icon>\n                                </Button>\n                                <Button icon>\n                                    <Icon\n                                        name={person.muted ? 'mute' : 'unmute'} onClick={() => muteIndiv(person.userId, person.muted ? false : true)}\n                                        color={person.muted ? 'red' : 'green'} onClick={() => muteIndiv(person.userId, person.muted ? false : true)}\n                                    ></Icon>\n                                </Button>\n                            </Button.Group>\n                        </div>\n                    </List.Item>\n\n\n                )}\n            </List>\n        )\n    }\n    const show = () => {\n        if (showSelected) {\n            setShowSelected(false)\n        }\n        else {\n            setShowSelected(true)\n        }\n    }\n    const clearSelected = () => {\n        setSelected([])\n    }\n\n    return (\n        <>\n            <Button onClick={() => show()}>{showSelected ? 'Show All' : 'Show Selected'}</Button>\n            {selected.length > 0 ? <Button color='red' onClick={() => clearSelected()}>Clear Selection</Button> : <></>}\n            { showSelected ? <Selected /> : <Selector />}\n        </>)\n}\n"]},"metadata":{},"sourceType":"module"}