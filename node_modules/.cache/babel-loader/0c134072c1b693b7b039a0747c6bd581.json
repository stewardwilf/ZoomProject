{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/wst15/Documents/websdk-react-app/src/components/ParticipantList.js\",\n    _s = $RefreshSig$();\n\nimport { displayed } from '../data/displayedParticipants';\nimport { Participant } from './Participant';\nimport './participant.css';\nimport React, { useState } from 'react';\nimport { Button, Icon } from 'semantic-ui-react';\nimport { useRecoilState } from 'recoil';\nimport { Container, Draggable } from 'react-smooth-dnd';\nimport { selectedAll as selectedp } from '../data/selectedAll';\nimport { rename } from './Zoom';\nimport { config } from '../data/config'; //participants-items__buttons\n\nexport const ParticipantList = () => {\n  _s();\n\n  const [editingId, setEditingId] = useState(-1);\n  const [participantsData] = useRecoilState(displayed);\n  const [newName, setNewName] = useState('');\n  const [cf] = useRecoilState(config);\n  const [selected, setSelected] = useRecoilState(selectedp);\n  const [showSelected, setShowSelected] = useState(false);\n\n  const renamePerson = () => {\n    //Goes off the assumption editingId is selected at the point of running. You could pass in ID as param.\n    var userObj = participantsData.find(x => x.userId === editingId);\n    userObj ? rename(userObj.userId, userObj.userName, newName) : console.log(\"User not found. Handle error. Maybe they're clicking save when somehow when editingId is -1 or something or maybe even the person has left the call and is no longer in participantsData\");\n    setEditingId(-1);\n    setNewName('');\n  };\n\n  const handleSetEditId = newId => {\n    editingId !== newId ? setEditingId(newId) : setEditingId(-1); //So it doesnt carry over from previous incomplete edit\n\n    setNewName('');\n  };\n\n  const select = name => {\n    //select individuals from list\n    if (selected.filter(item => item.userId === name.userId).length < 1) {\n      setSelected([...selected, name]);\n    } else {\n      setSelected(selected.filter(item => item.userId !== name.userId));\n    }\n  };\n\n  const show = () => {\n    if (showSelected) {\n      setShowSelected(false);\n    } else {\n      setShowSelected(true);\n    }\n  };\n\n  const clearSelected = () => {\n    setSelected([]);\n  };\n\n  const Selected = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: selected === null || selected === void 0 ? void 0 : selected.map((person, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"participant-container\",\n          children: [/*#__PURE__*/_jsxDEV(Icon, {\n            name: \"edit\",\n            onClick: () => handleSetEditId(person.userId)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Participant, {\n            idx: index,\n            id: person.userId,\n            originalName: person.userName,\n            muted: person.muted,\n            isHost: person.isHost,\n            editMode: editingId === person.userId,\n            newName: newName,\n            setNewName: setNewName,\n            saveNewName: renamePerson,\n            cf: cf\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }, this)]\n        }, person.userId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [cf ? /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => show(),\n      children: showSelected ? 'Show All' : 'Show Selected'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }, this) : '', selected.length > 0 ? /*#__PURE__*/_jsxDEV(Button, {\n      color: \"red\",\n      onClick: () => clearSelected(),\n      children: \"Clear Selection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 36\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), showSelected ? /*#__PURE__*/_jsxDEV(Selected, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 30\n    }, this) : participantsData === null || participantsData === void 0 ? void 0 : participantsData.map((person, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"participant-container\",\n      children: [/*#__PURE__*/_jsxDEV(Icon, {\n        name: \"edit\",\n        onClick: () => handleSetEditId(person.userId)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Participant, {\n        idx: index,\n        id: person.userId,\n        originalName: person.userName,\n        muted: person.muted,\n        isHost: person.isHost,\n        editMode: editingId === person.userId,\n        newName: newName,\n        setNewName: setNewName,\n        saveNewName: renamePerson,\n        cf: cf\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 25\n      }, this)]\n    }, person.userId, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true);\n};\n\n_s(ParticipantList, \"crvPUHy7vVykUGDazyQCRVbYyDI=\", false, function () {\n  return [useRecoilState, useRecoilState, useRecoilState];\n});\n\n_c = ParticipantList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ParticipantList\");","map":{"version":3,"sources":["/Users/wst15/Documents/websdk-react-app/src/components/ParticipantList.js"],"names":["displayed","Participant","React","useState","Button","Icon","useRecoilState","Container","Draggable","selectedAll","selectedp","rename","config","ParticipantList","editingId","setEditingId","participantsData","newName","setNewName","cf","selected","setSelected","showSelected","setShowSelected","renamePerson","userObj","find","x","userId","userName","console","log","handleSetEditId","newId","select","name","filter","item","length","show","clearSelected","Selected","map","person","index","muted","isHost"],"mappings":"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","sourcesContent":["import { displayed } from '../data/displayedParticipants';\nimport { Participant } from './Participant';\nimport './participant.css';\nimport React, { useState } from 'react'\nimport { Button, Icon } from 'semantic-ui-react'\nimport { useRecoilState } from 'recoil'\nimport { Container, Draggable } from 'react-smooth-dnd';\nimport { selectedAll as selectedp } from '../data/selectedAll'\nimport { rename } from './Zoom'\nimport { config } from '../data/config'\n\n//participants-items__buttons\n\nexport const ParticipantList = () => {\n    const [editingId, setEditingId] = useState(-1);\n    const [participantsData] = useRecoilState(displayed);\n    const [newName, setNewName] = useState('');\n    const [cf,] = useRecoilState(config);\n\n    const [selected, setSelected] = useRecoilState(selectedp);\n    const [showSelected, setShowSelected] = useState(false);\n\n    const renamePerson = () => {\n        //Goes off the assumption editingId is selected at the point of running. You could pass in ID as param.\n        var userObj = participantsData.find(x => x.userId === editingId);\n        (userObj)\n            ?\n\n            rename(userObj.userId, userObj.userName, newName)\n            :\n            console.log(\"User not found. Handle error. Maybe they're clicking save when somehow when editingId is -1 or something or maybe even the person has left the call and is no longer in participantsData\")\n\n        setEditingId(-1);\n        setNewName('');\n    }\n\n    const handleSetEditId = (newId) => {\n        (editingId !== newId) ? setEditingId(newId) : setEditingId(-1);\n        //So it doesnt carry over from previous incomplete edit\n        setNewName('');\n    }\n\n    const select = (name) => { //select individuals from list\n        if ((selected.filter((item) => item.userId === name.userId)).length < 1) {\n            setSelected([...selected, name])\n        }\n        else {\n            setSelected(selected.filter((item) => item.userId !== name.userId))\n        }\n    }\n\n\n    const show = () => {\n        if (showSelected) {\n            setShowSelected(false)\n        }\n        else {\n            setShowSelected(true)\n        }\n    }\n    const clearSelected = () => {\n        setSelected([])\n    }\n    const Selected = () => {\n        return (\n            <>\n                {selected?.map((person,index) => { \n                   \n                    return (\n                        <div className='participant-container' key={person.userId} >\n                        <Icon\n                            name='edit'\n                            onClick={() => handleSetEditId(person.userId)}>\n                        </Icon>\n                        <Participant\n                            idx = {index}\n                            id={person.userId}\n                            originalName={person.userName}\n                            muted={person.muted}\n                            isHost={person.isHost}\n                            editMode={(editingId === person.userId)}\n                            newName={newName}\n                            setNewName={setNewName}\n                            saveNewName={renamePerson}\n                            cf={cf}\n                        />\n\n                    </div>\n                    );\n                })}\n            </>\n        )\n    }\n\n\n    return (\n        <>\n            {cf?<Button onClick={() => show()}>{showSelected ? 'Show All' : 'Show Selected'}</Button>:''}\n            {selected.length > 0 ? <Button color='red' onClick={() => clearSelected()}>Clear Selection</Button> : <></>}\n            { showSelected ? <Selected /> :\n                participantsData?.map((person, index) =>\n                    <div className='participant-container' key={person.userId} >\n                        <Icon\n                            name='edit'\n                            onClick={() => handleSetEditId(person.userId)}>\n                        </Icon>\n                        <Participant\n                            idx = {index}\n                            id={person.userId}\n                            originalName={person.userName}\n                            muted={person.muted}\n                            isHost={person.isHost}\n                            editMode={(editingId === person.userId)}\n                            newName={newName}\n                            setNewName={setNewName}\n                            saveNewName={renamePerson}\n                            cf={cf}\n                        />\n\n                    </div>\n                )}\n        </>)\n\n}\n\n\n"]},"metadata":{},"sourceType":"module"}