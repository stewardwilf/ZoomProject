{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/wst15/Documents/websdk-react-app/src/components/ParticipantList.js\",\n    _s = $RefreshSig$();\n\nimport { displayed } from '../data/displayedParticipants';\nimport { Participant } from './Participant';\nimport './participant.css';\nimport React, { useState } from 'react';\nimport { Button, Icon } from 'semantic-ui-react';\nimport { useRecoilState } from 'recoil';\nimport { Container, Draggable } from 'react-smooth-dnd';\nimport { selected as selectedp } from '../data/selected';\nimport { rename } from './Zoom'; //participants-items__buttons\n\nexport const ParticipantList = () => {\n  _s();\n\n  const [editingId, setEditingId] = useState(-1);\n  const [participantsData] = useRecoilState(displayed);\n  const [newName, setNewName] = useState('');\n  const [selected, setSelected] = useRecoilState(selectedp);\n  const [showSelected, setShowSelected] = useState(false);\n\n  const renamePerson = () => {\n    //Goes off the assumption editingId is selected at the point of running. You could pass in ID as param.\n    var userObj = participantsData.find(x => x.userId === editingId);\n    userObj ? rename(userObj.userId, userObj.userName, newName) : console.log(\"User not found. Handle error. Maybe they're clicking save when somehow when editingId is -1 or something or maybe even the person has left the call and is no longer in participantsData\");\n    setEditingId(-1);\n    setNewName('');\n  };\n\n  const handleSetEditId = newId => {\n    editingId !== newId ? setEditingId(newId) : setEditingId(-1); //So it doesnt carry over from previous incomplete edit\n\n    setNewName('');\n  };\n\n  const select = name => {\n    //select individuals from list\n    if (selected.filter(item => item.userId === name.userId).length < 1) {\n      setSelected([...selected, name]);\n    } else {\n      setSelected(selected.filter(item => item.userId !== name.userId));\n    }\n  };\n\n  const reorderSelection = event => {\n    //reorder selection on drag\n    let copy = [...selected];\n    copy.splice(event.removedIndex, 1); //remove one item where we pick element from\n\n    copy.splice(event.addedIndex, 0, selected[event.removedIndex]); //add removed item to new position\n\n    setSelected(copy);\n  };\n\n  const show = () => {\n    if (showSelected) {\n      setShowSelected(false);\n    } else {\n      setShowSelected(true);\n    }\n  };\n\n  const clearSelected = () => {\n    setSelected([]);\n  };\n\n  let index = 0;\n\n  const Selected = () => {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      dragHandleSelector: \".column-drag-handle\",\n      onDrop: e => reorderSelection(e),\n      children: selected === null || selected === void 0 ? void 0 : selected.map((person, index) => {\n        index += 1;\n        return /*#__PURE__*/_jsxDEV(Draggable, {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"column-drag-handle\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"participant-container\",\n              children: [/*#__PURE__*/_jsxDEV(Icon, {\n                name: \"edit\",\n                onClick: () => handleSetEditId(person.userId)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Participant, {\n                idx: index,\n                id: person.userId,\n                originalName: person.userName,\n                muted: person.muted,\n                isHost: person.isHost,\n                editMode: editingId === person.userId,\n                newName: newName,\n                setNewName: setNewName,\n                saveNewName: renamePerson\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Icon, {\n                name: (selected === null || selected === void 0 ? void 0 : selected.filter(sel => sel.userId === person.userId).length) > 0 ? 'remove circle' : 'add circle' //set to change dynamically\n                ,\n                color: (selected === null || selected === void 0 ? void 0 : selected.filter(sel => sel.userId === person.userId).length) > 0 ? 'red' : 'green',\n                onClick: () => {\n                  select(person);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"right\",\n                children: \"\\u2630\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 41\n              }, this)]\n            }, person.userId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 33\n          }, this)\n        }, person.userId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => show(),\n      children: showSelected ? 'Show All' : 'Show Selected'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), selected.length > 0 ? /*#__PURE__*/_jsxDEV(Button, {\n      color: \"red\",\n      onClick: () => clearSelected(),\n      children: \"Clear Selection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 36\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), showSelected ? /*#__PURE__*/_jsxDEV(Selected, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 30\n    }, this) : participantsData === null || participantsData === void 0 ? void 0 : participantsData.map(person => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"participant-container\",\n      children: [/*#__PURE__*/_jsxDEV(Icon, {\n        name: \"edit\",\n        onClick: () => handleSetEditId(person.userId)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Participant, {\n        id: person.userId,\n        originalName: person.userName,\n        muted: person.muted,\n        isHost: person.isHost,\n        editMode: editingId === person.userId,\n        newName: newName,\n        setNewName: setNewName,\n        saveNewName: renamePerson\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Icon, {\n        name: (selected === null || selected === void 0 ? void 0 : selected.filter(sel => sel.userId === person.userId).length) > 0 ? 'remove circle' : 'add circle' //set to change dynamically\n        ,\n        color: (selected === null || selected === void 0 ? void 0 : selected.filter(sel => sel.userId === person.userId).length) > 0 ? 'red' : 'green',\n        onClick: () => {\n          select(person);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 25\n      }, this)]\n    }, person.userId, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true);\n};\n\n_s(ParticipantList, \"XPsFbj7QVhOek37aYeQbK5vqqGc=\", false, function () {\n  return [useRecoilState, useRecoilState];\n});\n\n_c = ParticipantList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ParticipantList\");","map":{"version":3,"sources":["/Users/wst15/Documents/websdk-react-app/src/components/ParticipantList.js"],"names":["displayed","Participant","React","useState","Button","Icon","useRecoilState","Container","Draggable","selected","selectedp","rename","ParticipantList","editingId","setEditingId","participantsData","newName","setNewName","setSelected","showSelected","setShowSelected","renamePerson","userObj","find","x","userId","userName","console","log","handleSetEditId","newId","select","name","filter","item","length","reorderSelection","event","copy","splice","removedIndex","addedIndex","show","clearSelected","index","Selected","e","map","person","muted","isHost","sel"],"mappings":"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","sourcesContent":["import { displayed } from '../data/displayedParticipants';\nimport { Participant } from './Participant';\nimport './participant.css';\nimport React, { useState } from 'react'\nimport { Button, Icon } from 'semantic-ui-react'\nimport { useRecoilState } from 'recoil'\nimport { Container, Draggable } from 'react-smooth-dnd';\nimport { selected as selectedp } from '../data/selected'\nimport { rename } from './Zoom'\n\n//participants-items__buttons\n\nexport const ParticipantList = () => {\n    const [editingId, setEditingId] = useState(-1);\n    const [participantsData] = useRecoilState(displayed);\n    const [newName, setNewName] = useState('');\n\n    const [selected, setSelected] = useRecoilState(selectedp);\n    const [showSelected, setShowSelected] = useState(false);\n\n    const renamePerson = () => {\n        //Goes off the assumption editingId is selected at the point of running. You could pass in ID as param.\n        var userObj = participantsData.find(x => x.userId === editingId);\n        (userObj)\n            ?\n\n            rename(userObj.userId, userObj.userName, newName)\n            :\n            console.log(\"User not found. Handle error. Maybe they're clicking save when somehow when editingId is -1 or something or maybe even the person has left the call and is no longer in participantsData\")\n\n        setEditingId(-1);\n        setNewName('');\n    }\n\n    const handleSetEditId = (newId) => {\n        (editingId !== newId) ? setEditingId(newId) : setEditingId(-1);\n        //So it doesnt carry over from previous incomplete edit\n        setNewName('');\n    }\n\n    const select = (name) => { //select individuals from list\n        if ((selected.filter((item) => item.userId === name.userId)).length < 1) {\n            setSelected([...selected, name])\n        }\n        else {\n            setSelected(selected.filter((item) => item.userId !== name.userId))\n        }\n    }\n\n    const reorderSelection = (event) => { //reorder selection on drag\n        let copy = [...selected]\n        copy.splice(event.removedIndex, 1); //remove one item where we pick element from\n        copy.splice(event.addedIndex, 0, selected[event.removedIndex]); //add removed item to new position\n        setSelected(copy)\n    }\n    const show = () => {\n        if (showSelected) {\n            setShowSelected(false)\n        }\n        else {\n            setShowSelected(true)\n        }\n    }\n    const clearSelected = () => {\n        setSelected([])\n    }\n    let index = 0\n    const Selected = () => {\n        return (\n            <Container dragHandleSelector=\".column-drag-handle\" onDrop={e => reorderSelection(e)}>\n                {selected?.map((person,index) => { \n                    index+=1\n                    return (\n                        <Draggable key={person.userId}>\n                                <span className=\"column-drag-handle\">\n                                    <div className='participant-container' key={person.userId} >\n                                        <Icon\n                                            name='edit'\n                                            onClick={() => handleSetEditId(person.userId)}>\n                                        </Icon>\n                                        <Participant\n                                            idx={index}\n                                            id={person.userId}\n                                            originalName={person.userName}\n                                            muted={person.muted}\n                                            isHost={person.isHost}\n                                            editMode={(editingId === person.userId)}\n                                            newName={newName}\n                                            setNewName={setNewName}\n                                            saveNewName={renamePerson}\n                                        />\n\n\n                                        <Icon\n                                            name={selected?.filter((sel) => sel.userId === person.userId).length > 0 ? 'remove circle' : 'add circle'} //set to change dynamically\n                                            color={selected?.filter((sel) => sel.userId === person.userId).length > 0 ? 'red' : 'green'}\n                                            onClick={() => { select(person) }}>\n                                        </Icon>\n                                        <div className='right'>\n                                        &#x2630;\n                                    </div>\n                                    </div>\n\n                                </span>\n                        </Draggable>\n                    );\n                })}\n            </Container>\n        )\n    }\n\n\n    return (\n        <>\n            <Button onClick={() => show()}>{showSelected ? 'Show All' : 'Show Selected'}</Button>\n            {selected.length > 0 ? <Button color='red' onClick={() => clearSelected()}>Clear Selection</Button> : <></>}\n            { showSelected ? <Selected /> :\n                participantsData?.map((person) =>\n                    <div className='participant-container' key={person.userId} >\n                        <Icon\n                            name='edit'\n                            onClick={() => handleSetEditId(person.userId)}>\n                        </Icon>\n                        <Participant\n                            id={person.userId}\n                            originalName={person.userName}\n                            muted={person.muted}\n                            isHost={person.isHost}\n                            editMode={(editingId === person.userId)}\n                            newName={newName}\n                            setNewName={setNewName}\n                            saveNewName={renamePerson}\n                        />\n\n\n                        <Icon\n                            name={selected?.filter((sel) => sel.userId === person.userId).length > 0 ? 'remove circle' : 'add circle'} //set to change dynamically\n                            color={selected?.filter((sel) => sel.userId === person.userId).length > 0 ? 'red' : 'green'}\n                            onClick={() => { select(person) }}>\n                        </Icon>\n                    </div>\n                )}\n        </>)\n\n}\n\n\n"]},"metadata":{},"sourceType":"module"}