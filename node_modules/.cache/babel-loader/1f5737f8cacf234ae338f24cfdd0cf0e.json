{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/wst15/Documents/websdk-react-app/src/components/ParticipantList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Button, Icon, Input, Form, List } from 'semantic-ui-react';\nimport { useRecoilState } from 'recoil';\nimport { Container, Draggable } from 'react-smooth-dnd';\nimport { selected as selectedp } from '../data/selected';\nimport { muteIndiv, rename } from './Zoom';\nimport { displayed } from '../data/displayedParticipants';\nexport const ParticipantList = () => {\n  _s();\n\n  const [selected, setSelected] = useRecoilState(selectedp);\n  const [participantsData] = useRecoilState(displayed);\n  const [showSelected, setShowSelected] = useState(false);\n  const [editingId, setEditingId] = useState(-1);\n  const [newName, setNewName] = useState('');\n\n  const renamePerson = () => {\n    //Goes off the assumption editingId is selected at the point of running. You could pass in ID as param.\n    var userObj = participantsData.find(x => x.userId === editingId);\n    userObj ? console.log('Do what you would do here where newName: ' + newName + ' originalName: ' + userObj.userName) : console.log(\"User not found. Handle error. Maybe they're clicking save when somehow when editingId is -1 or something or maybe even the person has left the call and is no longer in participantsData\");\n    setEditingId(-1);\n    setNewName('');\n  };\n\n  const handleSetEditId = newId => {\n    editingId !== newId ? setEditingId(newId) : setEditingId(-1); //So it doesnt carry over from previous incomplete edit\n\n    setNewName('');\n  };\n\n  useEffect(() => {\n    console.log('editingId Change', editingId, oldName, newName);\n  }, [editingId]);\n\n  const select = name => {\n    //select individuals from list\n    if (selected.filter(item => item.userId === name.userId).length < 1) {\n      setSelected([...selected, name]);\n    } else {\n      setSelected(selected.filter(item => item.userId !== name.userId));\n    }\n  };\n\n  const reorderSelection = event => {\n    //reorder selection on drag\n    let copy = [...selected];\n    copy.splice(event.removedIndex, 1); //remove one item where we pick element from\n\n    copy.splice(event.addedIndex, 0, selected[event.removedIndex]); //add removed item to new position\n\n    setSelected(copy);\n  };\n\n  const Selected = () => {\n    return /*#__PURE__*/_jsxDEV(Button.Group, {\n      fluid: true,\n      basic: true,\n      vertical: true,\n      className: \"ParticipantButtons\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        dragHandleSelector: \".column-drag-handle\",\n        onDrop: e => reorderSelection(e),\n        children: selected.map(p => {\n          return /*#__PURE__*/_jsxDEV(Draggable, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              className: \"draggable-item\",\n              active: true,\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"column-drag-handle\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"left\",\n                  children: [/*#__PURE__*/_jsxDEV(Icon, {\n                    name: \"edit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 67,\n                    columnNumber: 45\n                  }, this), p.userName]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 66,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"right\",\n                  children: [/*#__PURE__*/_jsxDEV(Icon, {\n                    name: p.muted ? 'mute' : 'unmute'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 71,\n                    columnNumber: 45\n                  }, this), \"\\u2630\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 70,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 33\n            }, this)\n          }, p.userId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this);\n  };\n\n  const resetEditingFields = () => {\n    setEditingId(0);\n    setNewName('');\n    setOldName('');\n  };\n\n  const sendDataOffToZoom = () => {\n    rename(editingId, oldName, newName);\n    resetEditingFields();\n  };\n\n  const setData = person => {\n    resetEditingFields();\n    setEditingId(person.userId);\n    setOldName(person.userName);\n  };\n\n  const InputForm = person => {\n    return /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: () => sendDataOffToZoom(),\n      children: /*#__PURE__*/_jsxDEV(Form.Group, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n          onChange: e => setNewName(e.target.value),\n          value: newName\n        }, 'key' + person.userId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Button, {\n          content: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this);\n  };\n\n  const Selector = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: participantsData.map(person => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"participant-container\",\n        children: [/*#__PURE__*/_jsxDEV(Participant, {\n          id: person.userId,\n          originalName: person.userName,\n          muted: person.muted,\n          isHost: person.isHost,\n          editMode: editingId === person.userId,\n          newName: newName,\n          setNewName: setNewName,\n          saveNewName: renamePerson\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSetEditId(person.userId),\n          children: \"rename\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 25\n        }, this)]\n      }, person.userId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this);\n  };\n\n  const show = () => {\n    if (showSelected) {\n      setShowSelected(false);\n    } else {\n      setShowSelected(true);\n    }\n  };\n\n  const clearSelected = () => {\n    setSelected([]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => show(),\n      children: showSelected ? 'Show All' : 'Show Selected'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this), selected.length > 0 ? /*#__PURE__*/_jsxDEV(Button, {\n      color: \"red\",\n      onClick: () => clearSelected(),\n      children: \"Clear Selection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 36\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), showSelected ? /*#__PURE__*/_jsxDEV(Selected, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 30\n    }, this) : /*#__PURE__*/_jsxDEV(Selector, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 45\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ParticipantList, \"9T3jmq6yzCEH1+vi74zv/sbuUZ0=\", false, function () {\n  return [useRecoilState, useRecoilState];\n});\n\n_c = ParticipantList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ParticipantList\");","map":{"version":3,"sources":["/Users/wst15/Documents/websdk-react-app/src/components/ParticipantList.js"],"names":["React","useState","useEffect","Button","Icon","Input","Form","List","useRecoilState","Container","Draggable","selected","selectedp","muteIndiv","rename","displayed","ParticipantList","setSelected","participantsData","showSelected","setShowSelected","editingId","setEditingId","newName","setNewName","renamePerson","userObj","find","x","userId","console","log","userName","handleSetEditId","newId","oldName","select","name","filter","item","length","reorderSelection","event","copy","splice","removedIndex","addedIndex","Selected","e","map","p","muted","resetEditingFields","setOldName","sendDataOffToZoom","setData","person","InputForm","target","value","Selector","isHost","show","clearSelected"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Button, Icon, Input, Form, List } from 'semantic-ui-react'\nimport { useRecoilState } from 'recoil'\nimport { Container, Draggable } from 'react-smooth-dnd';\nimport { selected as selectedp } from '../data/selected'\nimport { muteIndiv, rename } from './Zoom'\nimport { displayed } from '../data/displayedParticipants'\n\nexport const ParticipantList = () => {\n    const [selected, setSelected] = useRecoilState(selectedp);\n    const [participantsData] = useRecoilState(displayed);\n    const [showSelected, setShowSelected] = useState(false);\n\n    const [editingId, setEditingId] = useState(-1);\n    const [newName, setNewName] = useState('');\n\n    const renamePerson = () => {\n        //Goes off the assumption editingId is selected at the point of running. You could pass in ID as param.\n        var userObj = participantsData.find(x => x.userId === editingId);\n        (userObj)\n        ?\n            console.log('Do what you would do here where newName: ' + newName + ' originalName: ' + userObj.userName)\n            \n        :\n            console.log(\"User not found. Handle error. Maybe they're clicking save when somehow when editingId is -1 or something or maybe even the person has left the call and is no longer in participantsData\")\n    \n        setEditingId(-1);\n        setNewName('');\n    }\n\n    const handleSetEditId = (newId) => {\n        (editingId !== newId) ? setEditingId(newId) : setEditingId(-1);\n        //So it doesnt carry over from previous incomplete edit\n        setNewName('');\n    }\n    useEffect(() => {\n        console.log('editingId Change', editingId, oldName, newName)\n    }, [editingId]\n    );\n\n    const select = (name) => { //select individuals from list\n        if ((selected.filter((item) => item.userId === name.userId)).length < 1) {\n            setSelected([...selected, name])\n        }\n        else {\n            setSelected(selected.filter((item) => item.userId !== name.userId))\n        }\n    }\n\n    const reorderSelection = (event) => { //reorder selection on drag\n        let copy = [...selected]\n        copy.splice(event.removedIndex, 1); //remove one item where we pick element from\n        copy.splice(event.addedIndex, 0, selected[event.removedIndex]); //add removed item to new position\n        setSelected(copy)\n    }\n\n    const Selected = () => {\n        return (\n            <Button.Group fluid basic vertical className='ParticipantButtons'>\n                <Container dragHandleSelector=\".column-drag-handle\" onDrop={e => reorderSelection(e)}>\n                    {selected.map((p) => {\n                        return (\n                            <Draggable key={p.userId}>\n                                <Button className=\"draggable-item\" active={true}>\n                                    <span className=\"column-drag-handle\">\n                                        <div className='left'>\n                                            <Icon name='edit' />\n                                            {p.userName}\n                                        </div>\n                                        <div className='right'>\n                                            <Icon name={p.muted ? 'mute' : 'unmute'} />\n                                        &#x2630;\n                                    </div>\n                                    </span>\n                                </Button>\n                            </Draggable>\n                        );\n                    })}\n                </Container>\n            </Button.Group>\n        )\n    }\n\n    const resetEditingFields = () => {\n        setEditingId(0);\n        setNewName('');\n        setOldName('');\n    }\n    const sendDataOffToZoom = () => {\n        rename(editingId, oldName, newName);\n        resetEditingFields();\n    }\n\n    const setData = (person) => {\n        resetEditingFields()\n        setEditingId(person.userId)\n        setOldName(person.userName)\n    }\n\n    const InputForm = (person) => {\n        return (\n            <Form onSubmit={() => sendDataOffToZoom()}>\n                <Form.Group>\n                    <Form.Input\n                        key={'key' + person.userId}\n                        onChange={(e) => setNewName(e.target.value)}\n                        value={newName}\n                    />\n                    <Form.Button content='Submit' />\n                </Form.Group>\n            </Form>)\n    }\n    const Selector = () => {\n        return (\n            <div>\n            {participantsData.map((person) =>\n\n                    <div className='participant-container' key={person.userId} >\n                        <Participant\n                            id={person.userId}\n                            originalName={person.userName}\n                            muted={person.muted}\n                            isHost={person.isHost}\n                            editMode={(editingId === person.userId)}\n                            newName={newName}\n                            setNewName={setNewName}\n                            saveNewName={renamePerson}\n                        />\n                        <button onClick={() => handleSetEditId(person.userId)}>rename</button>\n                    </div>\n\n\n                )\n            }\n            </div>\n        )\n    }\n    const show = () => {\n        if (showSelected) {\n            setShowSelected(false)\n        }\n        else {\n            setShowSelected(true)\n        }\n    }\n    const clearSelected = () => {\n        setSelected([])\n    }\n\n    return (\n        <>\n            <Button onClick={() => show()}>{showSelected ? 'Show All' : 'Show Selected'}</Button>\n            {selected.length > 0 ? <Button color='red' onClick={() => clearSelected()}>Clear Selection</Button> : <></>}\n            { showSelected ? <Selected /> : <Selector />}\n        </>)\n}\n"]},"metadata":{},"sourceType":"module"}