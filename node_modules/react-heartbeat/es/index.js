function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component, Fragment } from 'react';
import PropTypes from 'prop-types';

var Heartbeat = function (_Component) {
  _inherits(Heartbeat, _Component);

  function Heartbeat(props) {
    _classCallCheck(this, Heartbeat);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

    _this.beat = function () {
      var nextBeat = _this.state.nextBeat + _this.props.heartbeatInterval;
      var nextTimeout = setTimeout(_this.beat, nextBeat - new Date().getTime());
      _this.setState({
        nextBeat: nextBeat,
        timeout: nextTimeout
      });
      _this.props.heartbeatFunction();
    };

    _this.state = {
      nextBeat: new Date().getTime() + _this.props.heartbeatInterval,
      timeout: null
    };
    return _this;
  }

  Heartbeat.prototype.componentDidMount = function componentDidMount() {
    var nextBeat = new Date().getTime() + this.props.heartbeatInterval;
    this.setState({
      timeout: setTimeout(this.beat, nextBeat - new Date().getTime())
    });
  };

  Heartbeat.prototype.componentWillUnmount = function componentWillUnmount() {
    clearTimeout(this.state.timeout);
  };

  Heartbeat.prototype.render = function render() {
    return React.createElement(Fragment, null);
  };

  return Heartbeat;
}(Component);

export { Heartbeat as default };


Heartbeat.propTypes = process.env.NODE_ENV !== "production" ? {
  heartbeatInterval: PropTypes.number,
  heartbeatFunction: PropTypes.func.isRequired
} : {};

Heartbeat.defaultProps = {
  heartbeatInterval: 1000
};